"use strict";(self.webpackChunkgracefullight_github_io=self.webpackChunkgracefullight_github_io||[]).push([["61888"],{64436:function(e,n,t){t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var i=t(71508),r=t(65813),s=t(661);let l={title:"FSD +009",date:new Date("2025-10-12T23:02:09.860Z"),description:"Fundamentals of software development +009",authors:"me",tags:["fsd"]},a,o={authorsImageUrls:[void 0]},c=[{value:"Exception",id:"exception",level:2},{value:"Error",id:"error",level:3},{value:"Java vs Pythone Exceiptions",id:"java-vs-pythone-exceiptions",level:3},{value:"Throwing Exceptions",id:"throwing-exceptions",level:3},{value:"File Handlers",id:"file-handlers",level:2},{value:"File Handler Methods",id:"file-handler-methods",level:3},{value:"Unit Testing",id:"unit-testing",level:2},{value:"Python unit testing",id:"python-unit-testing",level:3}];function d(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"exception",children:"Exception"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Exeptions are throwable objects."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Checked Exceptions"})," are checked by the compiler and should be handled (thrown or caught)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unchecked or runtime Exceptions"})," are not flagged by the compiler. Their occurrence during execution interrupts the program."]}),"\n",(0,r.jsx)(n.li,{children:"Exceptions can be thrown by developers. Throwing an exception delegates handling the exception to a different class or different level of the program."}),"\n",(0,r.jsx)(n.li,{children:"Thrown exception is left not handled, it will cause runtime error."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"error",children:"Error"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Java Errors usually indicate problems with the JVM or system resources.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"it is not meant to be caught or handled by applications."}),"\n",(0,r.jsx)(n.li,{children:"the base class is Error."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Python is no separate Error class hierarchy. Errors are represented as exceptions.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ValueError, TypeError, MemoryError, SystemError, etc. are subclasses of Exception."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"java-vs-pythone-exceiptions",children:"Java vs Pythone Exceiptions"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"Java"}),(0,r.jsx)(n.th,{children:"Python"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Syntax"}),(0,r.jsx)(n.td,{children:"try-catch-finally"}),(0,r.jsx)(n.td,{children:"try-except-else-finally"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"try"}),(0,r.jsx)(n.td,{children:"attempts to execute a block of code"}),(0,r.jsx)(n.td,{children:"attempts to execute a block of code"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"catch/except"}),(0,r.jsx)(n.td,{children:"execute alternative code if exception arises"}),(0,r.jsx)(n.td,{children:"execute alternative code if exception arises"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"finally (optional)"}),(0,r.jsx)(n.td,{children:"executes code regardless of try/catch outcome"}),(0,r.jsx)(n.td,{children:"executes code regardless of try/except outcome"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"else (optional)"}),(0,r.jsx)(n.td,{children:"X"}),(0,r.jsx)(n.td,{children:"executes code if no exception arises"})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class ExceptionExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        try {\n            System.out.print("Enter first number: ");\n            int a = scanner.nextInt();\n            System.out.print("Enter second number: ");\n            int b = scanner.nextInt();\n            int result = a / b; // This will raise ArithmeticException\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Caught an exception: " + e.getMessage());\n        } catch (NumberFormatException e) {\n            System.out.println("Caught a number format exception: " + e.getMessage());\n        } finally {\n            System.out.println("This block always executes.");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def div(a, b):\n    return a / b\n\na = input("Enter first number: ")\nb = input("Enter second number: ")\n\ntry:\n    result = div(int(a), int(b))  # This will raise ZeroDivisionError\n    print("Result:", result)\nexcept ZeroDivisionError as e:\n    print("Caught an exception:", e)\nexcept ValueError as e:\n    print("Caught a value error:", e)\nelse:\n    print("No exception occurred.")\nfinally:\n    print("This block always executes.")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"throwing-exceptions",children:"Throwing Exceptions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class IncorrectAgeError(Exception):\n    def __init__(self, age):\n        self.age = age\n        self.message = f"Age {age} is not valid. Age must be between 0 and 120."\n        super().__init__(self.message)\n\nnumber = int(input("Enter your age: "))\n\ntry:\n    if number < 0 or number > 120:\n        raise IncorrectAgeError(number)\n    print(f"Your age is {number}.")\nexcept IncorrectAgeError as e:\n    print(e)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"file-handlers",children:"File Handlers"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"r": Opens a file for reading, requires the file to exist'}),"\n",(0,r.jsx)(n.li,{children:'"w": Opens a file for writing. If the file exists, it is truncated to zero length. If the file does not exist, a new text file is created.'}),"\n",(0,r.jsx)(n.li,{children:'"a": Opens file for open for writing. The file is created if it does not exist.'}),"\n",(0,r.jsx)(n.li,{children:'"+": Opens a file in updating mode (reading and writing). It can be used with reading (r+) and writing (w+) modes.'}),"\n",(0,r.jsx)(n.li,{children:'"t": Opens a file in text mode (default mode).'}),"\n",(0,r.jsx)(n.li,{children:'"b": Opens a file in binary mode. It can be used with reading (rb) and writing (wb) modes.'}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"file-handler-methods",children:"File Handler Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'os.path.exists("file.txt")  # Check if file exists\nos.remove("file.txt")  # Delete a file\nos.remove("dir")  # Delete an empty directory\nos.chdir("path/dir")  # Change current working directory\nos.getcwd()  # Get current working directory\nos.mkdir("path/dir")  # Create a new directory\n\nfile_handler = open("file.txt", "r")  # Open a file in read mode\nfile_handler.read()  # Read the entire file content\nfile_handler.readline()  # Read a single line from the file\nfile_handler.close()  # Close the file\n\nfile_handler = open("file.txt", "w")  # Open a file in write mode\nfile_handler.write("Hello, World!")  # Write to the file\nfile_handler.write("\\n")  # Write a newline character\nfile_handler.close()  # Close the file\n\n\nimport csv\nwith open("file.txt", "r") as file_handler:  # Using \'with\' to handle file\n    csv_object = csv.reader(file_handler)\n    for row in csv_object:\n        print(row)\n    file_handler.close()\n\nwith open("file.txt", "a") as file_handler:  # Append mode\n    csv_writer = csv.writer(file_handler)\n    row = ["1", "gracefullight", "100"]\n    csv_writer.writerow(row)\n    file_handler.close()\n\nimport json\nwith open("data.json", "r") as file_handler:\n    data = json.load(file_handler)  # Load JSON data from file\n    print(data)\n    file_handler.close()\n\nwith open("data.json", "w") as file_handler:\n    json.dump(data, file_handler)  # Write JSON data to file\n    file_handler.close()\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"InputStream: reads byte-based input from various sources like files, memory, or network connections."}),"\n",(0,r.jsx)(n.li,{children:"OutputStream: writes byte-based output to various network connections."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"tests and verifies the smallest unis of an application such as functions, procedures, modules, or objects."}),"\n",(0,r.jsx)(n.li,{children:"the conducted during the development phase of the SDLC."}),"\n",(0,r.jsx)(n.li,{children:"Developers aim to identify defects and code bugs, which can save time and reduce costs in later testing stages."}),"\n",(0,r.jsxs)(n.li,{children:["software testing encompasses the fourmain testing phases, and unit testing is at the foundational level of the process.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Unit Testing"}),"\n",(0,r.jsx)(n.li,{children:"Integration Testing"}),"\n",(0,r.jsx)(n.li,{children:"System Testing"}),"\n",(0,r.jsx)(n.li,{children:"Acceptance Testing"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"python-unit-testing",children:"Python unit testing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["test cases are defined using classes that inherit from ",(0,r.jsx)(n.code,{children:"unittest.TestCase"})]}),"\n",(0,r.jsxs)(n.li,{children:["assertions are used to validate results ",(0,r.jsx)(n.code,{children:"self.assertEquals()"})]}),"\n",(0,r.jsxs)(n.li,{children:["the ",(0,r.jsx)(n.code,{children:"unittest.TextTestRunner"})," class can be used to run tests"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import unittest\n\nclass TestMathOperations(unittest.TestCase):\n\n    def test_addition(self):\n        self.assertEqual(2 + 3, 5)\n\n    def test_subtraction(self):\n        self.assertEqual(5 - 2, 3)\n\n    def test_multiplication(self):\n        self.assertEqual(4 * 3, 12)\n\n    def test_division(self):\n        self.assertEqual(10 / 2, 5)\n"})})]})}function h(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},661:function(e,n,t){t.d(n,{R:()=>l,x:()=>a});var i=t(59729);let r={},s=i.createContext(r);function l(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},71508:function(e){e.exports=JSON.parse('{"permalink":"/2025/10/13/fundamentals-of-software-development-009","source":"@site/blog/2025/10/13/fundamentals-of-software-development-009.md","title":"FSD +009","description":"Fundamentals of software development +009","date":"2025-10-12T23:02:09.860Z","tags":[{"inline":true,"label":"fsd","permalink":"/tags/fsd"}],"readingTime":4.02,"hasTruncateMarker":false,"authors":[{"name":"Eunkwang Shin","title":"Owner","url":"https://github.com/gracefullight","socials":{"linkedin":"https://www.linkedin.com/in/gracefullight/","github":"https://github.com/gracefullight","email":"mailto:gracefullight.dev@gmail.com"},"description":"Full Stack JavaScript Developer | Half-time Open Sourcerer.","page":{"permalink":"/authors/me"},"imageURL":"https://avatars.githubusercontent.com/u/11773683?v=4","key":"me"}],"frontMatter":{"title":"FSD +009","date":"2025-10-12T23:02:09.860Z","description":"Fundamentals of software development +009","authors":"me","tags":["fsd"]},"unlisted":false,"nextItem":{"title":"IAI +010","permalink":"/2025/10/12/introduction-to-ai-010"}}')}}]);