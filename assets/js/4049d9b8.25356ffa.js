"use strict";(self.webpackChunkgracefullight_github_io=self.webpackChunkgracefullight_github_io||[]).push([["84811"],{82844:function(e,n,t){t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var i=t(39151),r=t(69979),s=t(88529);let a={title:"Introduction to ai @002",date:new Date("2025-08-09T08:31:59.650Z"),description:"Introduction to ai @002",authors:"me",tags:["iai"]},o=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Environment",id:"environment",level:2},{value:"Agent",id:"agent",level:3},{value:"Characteristics of the environment",id:"characteristics-of-the-environment",level:2},{value:"Search problem",id:"search-problem",level:2},{value:"Frontier",id:"frontier",level:2},{value:"Search Algorithm",id:"search-algorithm",level:2},{value:"Tree Search vs Graph Search",id:"tree-search-vs-graph-search",level:3},{value:"Performance measures",id:"performance-measures",level:3},{value:"BFS",id:"bfs",level:3},{value:"BFS Tree",id:"bfs-tree",level:4},{value:"DFS",id:"dfs",level:3}];function c(e){let n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"environment",children:"Environment"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All possible state and information about how the states are related."}),"\n",(0,r.jsx)(n.li,{children:"The costs from one state to each of its adjacent states are also given."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"agent",children:"Agent"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simulated intelligence knows which state it is in."}),"\n",(0,r.jsx)(n.li,{children:"If it takes an action at a given state, it knows the next state and the corresponding cost."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"characteristics-of-the-environment",children:"Characteristics of the environment"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fully Observable: The agent always knows the current state of the environment at each point in time."}),"\n",(0,r.jsx)(n.li,{children:"Deterministic: The next state of the environment is completely determined by the current state and the action taken by the agent."}),"\n",(0,r.jsx)(n.li,{children:"Static: The environment is unchanged."}),"\n",(0,r.jsx)(n.li,{children:"Discrete: A limited number of distinct, clearly defined actions."}),"\n",(0,r.jsx)(n.li,{children:"Single agent: An agent operating by itself in an environment."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"search-problem",children:"Search problem"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Finding a path from a starting point to a goal point in a space."}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"The initial state"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State space"}),": The environment or area where the search takes place"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"A set of actions"}),": The possible actions that the agent can take in each state.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"ACTION (s)"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"A transition model"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"takes in a state and an action."}),"\n",(0,r.jsxs)(n.li,{children:["returns the successor state, which is any state reachable from doing action ",(0,r.jsx)(n.code,{children:"a"})," in state ",(0,r.jsx)(n.code,{children:"s"}),"."]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"RESULT(s, a)"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"A goal state"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The target location or position that needs to be reached."}),"\n",(0,r.jsx)(n.li,{children:"represented by a goal test function"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"A path cost function"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The cost associated with a particular path taken through the state space."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"c(s1, a, s2)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"frontier",children:"Frontier"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A set of nodes that are under consideration to be expanded."}),"\n",(0,r.jsx)(n.li,{children:"A set of leaf nodes in the search spanning tree are available for expansion at any given step."}),"\n",(0,r.jsx)(n.li,{children:"A search algorithm determines how to choose a node in the Frontier to grow the search spanning tree."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"search-algorithm",children:"Search Algorithm"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph LR;\n  ClassicSearchAlgorithm["Classic Search Algorithm"]\n  ClassicSearchAlgorithm --\x3e UniformedSearch["Uniformed Search"]\n  ClassicSearchAlgorithm --\x3e InformedSearch["Informed Search"]\n\n  UniformedSearch --\x3e BlindSearch["Blind Search"]\n    BlindSearch --\x3e BreadthFirstSearch["Breadth First Search"]\n    BlindSearch --\x3e DepthFirstSearch["Depth First Search"]\n  UniformedSearch --\x3e UniformCostSearch["Uniform Cost Search"]\n\n  InformedSearch --\x3e GreedyBestFirstSearch["Greedy Best-First Search"]\n  InformedSearch --\x3e AStarSearch["A* Search"]'}),"\n",(0,r.jsx)(n.h3,{id:"tree-search-vs-graph-search",children:"Tree Search vs Graph Search"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Explored Set"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The frontier in graph search separates the search-space graph into two regions, the explored region and the unexplored region, so that Every path from the initial state to an unexplored state has to pass through a state in the frontier."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-measures",children:"Performance measures"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Completeness"}),"\n",(0,r.jsx)(n.li,{children:"Cost Optimality"}),"\n",(0,r.jsx)(n.li,{children:"Time complexity"}),"\n",(0,r.jsx)(n.li,{children:"Space complexity"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"bfs",children:"BFS"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Queue"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"bfs-tree",children:"BFS Tree"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'from collections import deque\n\ndef bfs_tree(start, goal_test, successors):\n    """\n    start: \uC2DC\uC791 \uC0C1\uD0DC\n    goal_test(s): \uBAA9\uD45C \uAC80\uC0AC \uD568\uC218 -> bool\n    successors(s): \uC0C1\uD0DC s\uC5D0\uC11C \uAC08 \uC218 \uC788\uB294 \uB2E4\uC74C \uC0C1\uD0DC\uB4E4\uC758 \uB9AC\uC2A4\uD2B8 \uBC18\uD658\n\n    \uBC18\uD658: \uBAA9\uD45C\uC5D0 \uB3C4\uB2EC\uD558\uB294 \uACBD\uB85C(list) \uB610\uB294 None\n    (Tree-search: explored/\uC911\uBCF5 \uCCB4\uD06C \uC548 \uD568)\n    """\n    if goal_test(start):\n        return [start]\n\n    # \uB178\uB4DC = (state, parent_index)\n    nodes = [(start, None)]\n    frontier = deque([0])  # nodes\uC758 \uC778\uB371\uC2A4\uB97C \uD050\uC5D0 \uC800\uC7A5\n\n    while frontier:\n        parent_idx = frontier.popleft()\n        parent_state, _ = nodes[parent_idx]\n\n        for nxt in successors(parent_state):\n            nodes.append((nxt, parent_idx))\n            child_idx = len(nodes) - 1\n\n            if goal_test(nxt):\n                # \uACBD\uB85C \uBCF5\uC6D0\n                path, i = [], child_idx\n                while i is not None:\n                    path.append(nodes[i][0])\n                    i = nodes[i][1]\n                return list(reversed(path))\n\n            frontier.append(child_idx)\n\n    return None\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'from collections import deque\n\ndef bfs_graph(start, goal_test, successors):\n    """\n    start: \uC2DC\uC791 \uC0C1\uD0DC (\uC608: \'Arad\')\n    goal_test(s): s\uAC00 \uBAA9\uD45C\uBA74 True\n    successors(s): \uC0C1\uD0DC s\uC5D0\uC11C (\uB2E4\uC74C\uC0C1\uD0DC, \uBE44\uC6A9) \uD639\uC740 \uADF8\uB0E5 \uB2E4\uC74C\uC0C1\uD0DC \uB9AC\uC2A4\uD2B8 \uBC18\uD658\n                   \uC544\uB798\uC5D0\uC11C\uB294 \uB2E4\uC74C\uC0C1\uD0DC \uB9AC\uC2A4\uD2B8\uB77C\uACE0 \uAC00\uC815\n    \uBC18\uD658: start -> ... -> goal \uACBD\uB85C \uB9AC\uC2A4\uD2B8, \uC5C6\uC73C\uBA74 None\n    """\n    # \uB178\uB4DC = (state, parent_index)\n    frontier = deque([(start, None)])   # FIFO \uD050\n    frontier_states = {start}           # frontier\uC5D0 \uC788\uB294 \uC0C1\uD0DC \uC9D1\uD569 (\uC911\uBCF5 \uBC29\uC9C0)\n    explored = set()                    # \uC774\uBBF8 \uD655\uC7A5\uD55C \uC0C1\uD0DC(Closed)\n\n    # \uACBD\uB85C \uBCF5\uC6D0\uC744 \uC704\uD574 \uBAA8\uB4E0 \uB178\uB4DC\uB97C \uBC30\uC5F4\uC5D0 \uB530\uB85C \uC800\uC7A5\n    nodes = [(start, None)]             # nodes[i] = (state, parent_index)\n    index_in_queue = deque([0])         # frontier\uC5D0\uC11C\uC758 \uC778\uB371\uC2A4(=nodes\uC758 \uC778\uB371\uC2A4)\n\n    if goal_test(start):\n        return [start]\n\n    while frontier:\n        state, parent = frontier.popleft()\n        node_idx = index_in_queue.popleft()\n        frontier_states.discard(state)\n        explored.add(state)\n\n        for nxt in successors(state):\n            if (nxt not in explored) and (nxt not in frontier_states):\n                # child \uB178\uB4DC \uC800\uC7A5\n                nodes.append((nxt, node_idx))\n                child_idx = len(nodes) - 1\n\n                if goal_test(nxt):\n                    # \uACBD\uB85C \uBCF5\uC6D0\n                    path = []\n                    i = child_idx\n                    while i is not None:\n                        path.append(nodes[i][0])\n                        i = nodes[i][1]\n                    return list(reversed(path))\n\n                # frontier\uC5D0 \uC0BD\uC785\n                frontier.append((nxt, node_idx))\n                index_in_queue.append(child_idx)\n                frontier_states.add(nxt)\n\n    return None\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'graph = {\n    "Arad": ["Sibiu", "Timisoara", "Zerind"],\n    "Sibiu": ["Arad", "Fagaras"],\n    "Timisoara": ["Arad", "Lugoj"],\n    "Zerind": ["Arad"],\n    "Fagaras": [],\n    "Lugoj": []\n}\n\npath = bfs(\n    start="Arad",\n    goal_test=lambda s: s == "Lugoj",\n    successors=lambda s: graph.get(s, [])\n)\nprint(path) \n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Has the shallowest path to every node on the frontier"}),"\n",(0,r.jsx)(n.li,{children:"memory-intensive as it stores all nodes."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"dfs",children:"DFS"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Stack"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'def depth_first_search(initial_state, goal_test, actions):\n    """\n    initial_state: \uC2DC\uC791 \uC0C1\uD0DC\n    goal_test(s): \uC0C1\uD0DC s\uAC00 \uBAA9\uD45C\uBA74 True\n    actions(s): \uC0C1\uD0DC s\uC5D0\uC11C \uC774\uB3D9 \uAC00\uB2A5\uD55C \uB2E4\uC74C \uC0C1\uD0DC\uB4E4\uC758 \uB9AC\uC2A4\uD2B8 \uBC18\uD658\n    \uBC18\uD658: start \u2192 goal \uACBD\uB85C(list) \uB610\uB294 None\n    """\n\n    # \uBAA8\uB4E0 \uB178\uB4DC \uC800\uC7A5: nodes[i] = (state, parent_index)\n    nodes = [(initial_state, None)]\n\n    # frontier \u2190 FILO \uC2A4\uD0DD (\uC5EC\uAE30\uC11C\uB294 \uB178\uB4DC \uC778\uB371\uC2A4\uB9CC \uC800\uC7A5)\n    frontier = [0]\n\n    # frontier\uC5D0 \uC788\uB294 \uC0C1\uD0DC\uB4E4\uC758 \uC9D1\uD569 (\uC911\uBCF5 \uC0BD\uC785 \uBC29\uC9C0\uC6A9)\n    stacked_states = {initial_state}\n\n    # explored \u2190 \uC774\uBBF8 \uD655\uC7A5(\uC790\uC2DD \uC0DD\uC131)\uD55C \uC0C1\uD0DC\uB4E4\uC758 \uC9D1\uD569\n    explored = set()\n\n    # \uC2DC\uC791 \uC0C1\uD0DC\uAC00 \uBAA9\uD45C\uB77C\uBA74 \uBC14\uB85C \uBC18\uD658\n    if goal_test(initial_state):\n        return [initial_state]\n\n    # DFS \uB8E8\uD504 \uC2DC\uC791\n    while True:\n        # frontier\uAC00 \uBE44\uBA74 \uC2E4\uD328\n        if not frontier:\n            return None\n\n        # \uC2A4\uD0DD\uC5D0\uC11C \uB9E8 \uC704 \uB178\uB4DC \uAEBC\uB0B4\uAE30\n        node_idx = frontier.pop()\n        state, parent_idx = nodes[node_idx]\n\n        # \uC2A4\uD0DD \uC0C1\uD0DC \uC9D1\uD569\uC5D0\uC11C \uC81C\uAC70 (\uC774\uC81C \uD655\uC7A5\uD560 \uCC28\uB840)\n        stacked_states.discard(state)\n\n        # \uD604\uC7AC \uC0C1\uD0DC\uC5D0\uC11C \uAC00\uB2A5\uD55C \uBAA8\uB4E0 \uC790\uC2DD \uC0C1\uD0DC \uD655\uC778\n        for child_state in actions(state):\n            # \uC790\uC2DD \uC0C1\uD0DC\uAC00 explored\uB098 frontier\uC5D0 \uC5C6\uC744 \uB54C\uB9CC \uCC98\uB9AC\n            if (child_state not in explored) and (child_state not in stacked_states):\n                # \uC0C8 \uB178\uB4DC \uC800\uC7A5 (\uBD80\uBAA8\uB294 \uD604\uC7AC \uB178\uB4DC)\n                nodes.append((child_state, node_idx))\n                child_idx = len(nodes) - 1\n\n                # \uBAA9\uD45C \uC0C1\uD0DC\uBA74 \uACBD\uB85C \uBCF5\uC6D0\uD574\uC11C \uBC18\uD658\n                if goal_test(child_state):\n                    path, i = [], child_idx\n                    while i is not None:\n                        path.append(nodes[i][0])\n                        i = nodes[i][1]\n                    return list(reversed(path))\n\n                # \uBAA9\uD45C\uAC00 \uC544\uB2C8\uBA74 \uC2A4\uD0DD\uC5D0 push\n                frontier.append(child_idx)\n                stacked_states.add(child_state)\n\n        # \uBAA8\uB4E0 \uC790\uC2DD \uCC98\uB9AC\uAC00 \uB05D\uB098\uBA74 explored\uC5D0 \uCD94\uAC00\n        explored.add(state)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Low memory usage"}),"\n",(0,r.jsx)(n.li,{children:"Can get stuck in deep or infinite branches (Not cost-optimal)"}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},88529:function(e,n,t){t.d(n,{Z:()=>o,a:()=>a});var i=t(52136);let r={},s=i.createContext(r);function a(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},39151:function(e){e.exports=JSON.parse('{"permalink":"/2025/08/09/introduction-to-ai-002","source":"@site/blog/2025/08/09/introduction-to-ai-002.md","title":"Introduction to ai @002","description":"Introduction to ai @002","date":"2025-08-09T08:31:59.650Z","tags":[{"inline":true,"label":"iai","permalink":"/tags/iai"}],"readingTime":4.71,"hasTruncateMarker":false,"authors":[{"name":"Eunkwang Shin","title":"Owner","url":"https://github.com/gracefullight","socials":{"linkedin":"https://www.linkedin.com/in/gracefullight/","github":"https://github.com/gracefullight"},"description":"Full Stack JavaScript Developer | Half-time Open Sourcerer.","page":{"permalink":"/authors/me"},"imageURL":"https://avatars.githubusercontent.com/u/11773683?v=4","key":"me"}],"frontMatter":{"title":"Introduction to ai @002","date":"2025-08-09T08:31:59.650Z","description":"Introduction to ai @002","authors":"me","tags":["iai"]},"unlisted":false,"nextItem":{"title":"Fundamentals of Data Analytics @002","permalink":"/2025/08/06/fundamentals-of-data-analytics-002"}}')}}]);