"use strict";(self.webpackChunkgracefullight_github_io=self.webpackChunkgracefullight_github_io||[]).push([["70036"],{11845:function(e,n,s){s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var t=s(75593),i=s(69979),l=s(59338);let a={title:"FSD +008",date:new Date("2025-09-15T00:02:30.848Z"),description:"Fundamentals of software development +008",authors:"me",tags:["fsd"]},r=void 0,o={authorsImageUrls:[void 0]},c=[{value:"OOP Principles",id:"oop-principles",level:2},{value:"Encapsulation",id:"encapsulation",level:3},{value:"Intheritance",id:"intheritance",level:3},{value:"Polymorphism",id:"polymorphism",level:3},{value:"Abstraction",id:"abstraction",level:3},{value:"OOP Design Rules",id:"oop-design-rules",level:2},{value:"Menu Pattern",id:"menu-pattern",level:2}];function d(e){let n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"oop-principles",children:"OOP Principles"}),"\n",(0,i.jsx)(n.h3,{id:"encapsulation",children:"Encapsulation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'bundles data attributes (fields) with methods that use the data in a single unit called "Object"'}),"\n",(0,i.jsxs)(n.li,{children:["hides sensitive data attributes by declaring the fields ",(0,i.jsx)(n.code,{children:"private"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["fields can be declared ",(0,i.jsx)(n.code,{children:"protected"})," in the parent class, allowing access from the child class."]}),"\n",(0,i.jsx)(n.li,{children:"exposes the data attributes values only through public getters/setters to allow access or modification of the field values."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"intheritance",children:"Intheritance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"class A:\n    pass\n\nclass B(A):\n    pass\n\nclass C(A):\n    pass\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Superclass defines common method signatures (with/without implementation) and fields."}),"\n",(0,i.jsx)(n.li,{children:"Subclasses provide the implementations for (or override) these method signatures"}),"\n",(0,i.jsx)(n.li,{children:"private attributes cannot be directly accessed from the child classes."}),"\n",(0,i.jsxs)(n.li,{children:["to refer to superclass properties (fields, methods) or constructor, use the keyword ",(0,i.jsx)(n.code,{children:"super()"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"polymorphism",children:"Polymorphism"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"means many forms."}),"\n",(0,i.jsx)(n.li,{children:"permits an object to have multiple types."}),"\n",(0,i.jsx)(n.li,{children:"allows object of different types but with a common parent to be stored in the same collection."}),"\n",(0,i.jsx)(n.li,{children:"enables inherited methods from the parent to perform different tasks when called by subclasses."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"abstraction",children:"Abstraction"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the process of hiding the implementation details and exposing only the necessary behavior to the user."}),"\n",(0,i.jsx)(n.li,{children:"abstract class must at least contain one abstract method."}),"\n",(0,i.jsx)(n.li,{children:"abstract class ccan have concrete methods."}),"\n",(0,i.jsx)(n.li,{children:"abtract methods are only prototypes in the parent class, the actual implementation is provided by the subclasses that inherit the abstract class."}),"\n",(0,i.jsxs)(n.li,{children:["rules","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"if a class contains at least on abstract methods, it should be declared abstract."}),"\n",(0,i.jsx)(n.li,{children:"if another class inherits an abstract class, it must implement all the abstract methods of that class."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'from abc import ABC, abstractmethod\n\nclass Person(ABC):\n    def __init__(self, name):\n        self.name = name\n\n    @abstractmethod\n    def show(self):\n        pass\n\n    def show_name(self):\n        print(f"Name: {self.name}")\n\nclass Student(Person):\n    def __init__(self, name, id):\n        self.id = id\n        super().__init__(name)\n\n    def show(self):\n        super().show_name()\n        print(f"ID: {self.id}")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["interfaces are complete abstract classes declared with the ",(0,i.jsx)(n.code,{children:"interface"})," keyword."]}),"\n",(0,i.jsx)(n.li,{children:"only contain prototype (abstract) methods with empty body code."}),"\n",(0,i.jsx)(n.li,{children:"cannot be instantiated nor inherited as they do not have constructors."}),"\n",(0,i.jsx)(n.li,{children:"a class can implement multiple interfaces."}),"\n",(0,i.jsx)(n.li,{children:"a class implementinig an interface must provide an implementation for all its abstract methods."}),"\n",(0,i.jsx)(n.li,{children:"add an access layer to further hide the methods impelmentation."}),"\n",(0,i.jsx)(n.li,{children:"act as a middleware inside the program, allowing human, machines, and other software to interact with the program's functionalities without knowing the implementation details."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'# interface A is a fully abstract class\n# interface A must inherit ABC\n# class B(A) must implement all abstract methods of A\n# interface A methods have the @abstractmethod decorator with pass as body-code\nfrom abc import ABC, abstractmethod\n\nclass Person(ABC):\n    @abstractmethod\n    def show_info(self):\n        pass\n\nclass Student(Person):\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n    \n    def show_info(self):\n        print(f"Name: {self.name}, ID: {self.id}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"oop-design-rules",children:"OOP Design Rules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"How to split the code into seperate classes and preserve encapsulation"}),"\n",(0,i.jsx)(n.li,{children:"How to organizae the code into methods to hide the implementation details and expose the behavior"}),"\n",(0,i.jsx)(n.li,{children:"How the objects interact at runtime"}),"\n",(0,i.jsx)(n.li,{children:"How to name the class entities"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"5 Design Rules"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Encapsulation","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"hide fields behind methdos"}),"\n",(0,i.jsx)(n.li,{children:"requires fields to be private while allowing methods to be public"}),"\n",(0,i.jsx)(n.li,{children:"requires a methods related to a field (such as access, modify, use) be defind in the same class."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Push code to the right","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"requires the code/methods used by objects of a class be written in the same class."}),"\n",(0,i.jsx)(n.li,{children:"ensures methods are written for reusability and placed in the correct class so they can make use of the class's fields."}),"\n",(0,i.jsx)(n.li,{children:"determines which class is responsible for defining the methods needed to achieve the program's goals."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Spread plans across classes","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"involves planning the distribution of code across multiple classes from the start."}),"\n",(0,i.jsx)(n.li,{children:"focuses on distributing responsibilities logically among different classes, so that each class has a clear and focused role."}),"\n",(0,i.jsx)(n.li,{children:"by convention, this rule requires using the same method name (for the same goal) across all classes."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Hide by default","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"hiding implementation details within a class and exposing only the necessary functionality to the outside."}),"\n",(0,i.jsx)(n.li,{children:"helps in achieving encapsulation and abstraction."}),"\n",(0,i.jsx)(n.li,{children:"promotes better design and maintainability."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Follow naming conventions","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"use nouns to name fiels."}),"\n",(0,i.jsx)(n.li,{children:"use nouns to name functions."}),"\n",(0,i.jsx)(n.li,{children:"use verbs to name procedures."}),"\n",(0,i.jsxs)(n.li,{children:["if an entitiy is compsed of two or more words.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"use camelCase/snake_case for fields and methods."}),"\n",(0,i.jsx)(n.li,{children:"use PascalCase for class names."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"menu-pattern",children:"Menu Pattern"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"consolidates the action-trieggers of a program into a single method."}),"\n",(0,i.jsx)(n.li,{children:"common design choice in applications with user interaction."}),"\n",(0,i.jsxs)(n.li,{children:["the menu methods is executed in the program's main method.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"offers users interactive CLI command choices."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"menu()"})," requires a read-function in a while loop, allowing the menu() tor repeatedly read inpus from STDIN."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"<condition> = read_choice()\n\nloop (<condition>):\n    check (<condition>):\n        case 1: do task <action_1()>\n        case 2: do task <action_2()>\n        ...\n        case n: do task <action_n()>\n        default: <alternative-action>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'menu(self):\n    choice = input("Enter choice: (d/w/b/h/x): ").lower()\n    while choice != "x":\n        match choice:\n            case "d":\n                self.deposit()\n            case "w":\n                self.withdraw()\n            case "b":\n                self.show_balance()\n            case "h":\n                self.show_history()\n            case "x":\n                self.exit()\n            case _:\n                self.show_invalid_choice_message()\n\n        choice = input("Enter choice: (d/w/b/h/x): ").lower()\n'})})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},59338:function(e,n,s){s.d(n,{Z:()=>r,a:()=>a});var t=s(52136);let i={},l=t.createContext(i);function a(e){let n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}},75593:function(e){e.exports=JSON.parse('{"permalink":"/2025/09/15/fundamentals-of-software-development-008","source":"@site/blog/2025/09/15/fundamentals-of-software-development-008.md","title":"FSD +008","description":"Fundamentals of software development +008","date":"2025-09-15T00:02:30.848Z","tags":[{"inline":true,"label":"fsd","permalink":"/tags/fsd"}],"readingTime":4.14,"hasTruncateMarker":false,"authors":[{"name":"Eunkwang Shin","title":"Owner","url":"https://github.com/gracefullight","socials":{"linkedin":"https://www.linkedin.com/in/gracefullight/","github":"https://github.com/gracefullight"},"description":"Full Stack JavaScript Developer | Half-time Open Sourcerer.","page":{"permalink":"/authors/me"},"imageURL":"https://avatars.githubusercontent.com/u/11773683?v=4","key":"me"}],"frontMatter":{"title":"FSD +008","date":"2025-09-15T00:02:30.848Z","description":"Fundamentals of software development +008","authors":"me","tags":["fsd"]},"unlisted":false,"prevItem":{"title":"IAI +007","permalink":"/2025/09/15/introduction-to-ai-007"},"nextItem":{"title":"FDA +007","permalink":"/2025/09/14/fundamentals-of-data-analytics-007"}}')}}]);