"use strict";(self.webpackChunkgracefullight_github_io=self.webpackChunkgracefullight_github_io||[]).push([["88656"],{70734:function(e,n,s){s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var i=s(92102),t=s(69979),a=s(88529);let l={title:"Fundamentals of software development @002",date:new Date("2025-08-04T02:49:53.887Z"),description:"Fundamentals of software development @002",authors:"me",tags:["fsd"]},r=void 0,c={authorsImageUrls:[void 0]},o=[{value:"Classes &amp; Objects",id:"classes--objects",level:2},{value:"Class",id:"class",level:3},{value:"Object",id:"object",level:3},{value:"Object-Oriented Paradigm Principles",id:"object-oriented-paradigm-principles",level:2},{value:"Abstraction",id:"abstraction",level:3},{value:"Encapsulation",id:"encapsulation",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Polymorphism",id:"polymorphism",level:3},{value:"Object-Oriented Design",id:"object-oriented-design",level:2},{value:"Identify classes",id:"identify-classes",level:3},{value:"Class diagram",id:"class-diagram",level:3},{value:"Associations",id:"associations",level:3},{value:"Multiplicity",id:"multiplicity",level:4},{value:"Recursive or reflexive association",id:"recursive-or-reflexive-association",level:4},{value:"Attributes",id:"attributes",level:4},{value:"Association Classes",id:"association-classes",level:4}];function d(e){let n={h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"classes--objects",children:"Classes & Objects"}),"\n",(0,t.jsx)(n.h3,{id:"class",children:"Class"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A template that defines the attributes and methods of an object, which can be used to create many objects."}),"\n",(0,t.jsx)(n.li,{children:"Name of the class is noun."}),"\n",(0,t.jsx)(n.li,{children:"Functions are defined in the class, containing the function data."}),"\n",(0,t.jsx)(n.li,{children:"Many objects can be created from the same class."}),"\n",(0,t.jsx)(n.li,{children:"A class can be inherited by many sub-classes"}),"\n",(0,t.jsx)(n.li,{children:"A child class can have one or more parent classes. (super-classes)"}),"\n",(0,t.jsx)(n.li,{children:"Encapsulated data"}),"\n",(0,t.jsx)(n.li,{children:"Behaviors of a class are exposed while the implementation is hidden."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"object",children:"Object"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An instance of a class, created the class template during runtime."}),"\n",(0,t.jsx)(n.li,{children:"Object-oriented software is composed of many objects"}),"\n",(0,t.jsx)(n.li,{children:"a composite data type identified by its attributes (fields) and behaviors (functions), which are defined in the class."}),"\n",(0,t.jsx)(n.li,{children:"object-oriented design analysis: to identify the classes and relationships between the classes to model how the system would work."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"object-oriented-paradigm-principles",children:"Object-Oriented Paradigm Principles"}),"\n",(0,t.jsx)(n.h3,{id:"abstraction",children:"Abstraction"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"hides the internal implementation of functions and expose to other class the behavior of those functions."}),"\n",(0,t.jsx)(n.li,{children:"Data abstraction: hide the variables stored the data and only expose the values."}),"\n",(0,t.jsx)(n.li,{children:"Function abstraction: hide the function code and only export the function behavior."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"encapsulation",children:"Encapsulation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"a fundamental principle of OOP, increases data and code security, enhances performance by reducing object interactions."}),"\n",(0,t.jsx)(n.li,{children:"minimize the number of interactions from outside."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"inheritance",children:"Inheritance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"allows classes to have sub-classes."}),"\n",(0,t.jsx)(n.li,{children:"a parent class can have many children."}),"\n",(0,t.jsx)(n.li,{children:"a child class can have more than one parent."}),"\n",(0,t.jsx)(n.li,{children:"a child class inherits their parent class and can also override them."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"polymorphism",children:"Polymorphism"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"more of the same type of object can be used interchangeably."}),"\n",(0,t.jsx)(n.li,{children:"object of different types to be treated as objects of a common parent."}),"\n",(0,t.jsx)(n.li,{children:"multiple object types with the same parent can implement the same function in different ways."}),"\n",(0,t.jsx)(n.li,{children:"multiple object types with the same parent can use the same attributes with different values."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"object-oriented-design",children:"Object-Oriented Design"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The process of designing a software using oop."}),"\n",(0,t.jsx)(n.li,{children:"Identify the classes\n-> Identify the classes' attributes and behaviors\n-> Identify the how classes interact with each other and create a visual class model"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"identify-classes",children:"Identify classes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Classes are derived from use cases and actors described in the requirement analysis process."}),"\n",(0,t.jsx)(n.li,{children:"Classes should be identified exactly as needed."}),"\n",(0,t.jsx)(n.li,{children:"Reduce coupling and enable extensibility."}),"\n",(0,t.jsx)(n.li,{children:"Identifying a class always requires to identify the fields and methods."}),"\n",(0,t.jsx)(n.li,{children:"A class can use the methods of another class.\n-> one class (the client) uses or depends on another class (the supplier)."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"class-diagram",children:"Class diagram"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"UML visual representation of the object-oriented software system."}),"\n",(0,t.jsx)(n.li,{children:"Describes the attributes and operations of classes, relationships, and any constraints."}),"\n",(0,t.jsx)(n.li,{children:"Used as a plan to construct executable code and define the way in which objects may interact."}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:"classDiagram\n    Account\n    class Account {\n        +String accountNumber\n        +double balance\n        +deposit(double amount)\n        +withdraw(double amount)\n    }"}),"\n",(0,t.jsx)(n.h3,{id:"associations",children:"Associations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"a relationship between classes indicating a meaningful connection."}),"\n",(0,t.jsxs)(n.li,{children:["Labelled by","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Association name"}),"\n",(0,t.jsx)(n.li,{children:"Role name"}),"\n",(0,t.jsx)(n.li,{children:"Multiplicity"}),"\n",(0,t.jsx)(n.li,{children:"Navigability"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Company "1" --\x3e "*" Person : employs'}),"\n",(0,t.jsx)(n.h4,{id:"multiplicity",children:"Multiplicity"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"how many instances of type A can be associated with on instance of type B."}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Store "1" --\x3e "*" ItemID : Stocks\n  University "1" --\x3e "0..*" Student : enrolls\n  Team "1" --\x3e "1..*" Player : has\n  Course "1" --\x3e "1..40" Student : limits\n  Hand "1" --\x3e "5" Finger : has\n  Dice "1" --\x3e "3,5,6" Face : shows'}),"\n",(0,t.jsx)(n.h4,{id:"recursive-or-reflexive-association",children:"Recursive or reflexive association"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"a class can have an association with itself."}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Course -- "*" Course : prerequisite'}),"\n",(0,t.jsx)(n.h4,{id:"attributes",children:"Attributes"}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  House "1" --\x3e "1" Address\n\n  class House2["House"] {\n    address: Address\n  }'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["m",":m"," association can be divided into two 1",":m"," associations."]}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Student "*" -- "*" Course : Enrolment\n\n  Student2 "1" -- "*" Enrolment2\n  Enrolment2 "*" -- "1" Course2\n\n  class Student2["Student"] {\n\n  }\n  class Enrolment2["Enrolment"] {\n    student\n    course\n    labSession\n    mark\n  }\n  class Course2["Course"] {\n    \n  }'}),"\n",(0,t.jsx)(n.h4,{id:"association-classes",children:"Association Classes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An attribute is related to an association."}),"\n",(0,t.jsx)(n.li,{children:"Instance of the association class have a life-time dependency on the association."}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Company "*" -- "*" Person : employs\n  Company .. Employment\n  Person .. Employment\n\n  class Employment {\n    salary\n  }\n\n  note for Employment "A person may have employment with several companies"'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"an associative type should exist in the background somewhere."}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Subject "1" -- "*" Enrollment\n  Enrollment "*" -- "1" Student\n\n  class Enrollment {\n    Student\n    Subject\n  }'})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},88529:function(e,n,s){s.d(n,{Z:()=>r,a:()=>l});var i=s(52136);let t={},a=i.createContext(t);function l(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(a.Provider,{value:n},e.children)}},92102:function(e){e.exports=JSON.parse('{"permalink":"/2025/08/04/fundamentals-of-software-development-002","source":"@site/blog/2025/08/04/fundamentals-of-software-development-002.md","title":"Fundamentals of software development @002","description":"Fundamentals of software development @002","date":"2025-08-04T02:49:53.887Z","tags":[{"inline":true,"label":"fsd","permalink":"/tags/fsd"}],"readingTime":3.31,"hasTruncateMarker":false,"authors":[{"name":"Eunkwang Shin","title":"Owner","url":"https://github.com/gracefullight","socials":{"linkedin":"https://www.linkedin.com/in/gracefullight/","github":"https://github.com/gracefullight"},"description":"Full Stack JavaScript Developer | Half-time Open Sourcerer.","page":{"permalink":"/authors/me"},"imageURL":"https://avatars.githubusercontent.com/u/11773683?v=4","key":"me"}],"frontMatter":{"title":"Fundamentals of software development @002","date":"2025-08-04T02:49:53.887Z","description":"Fundamentals of software development @002","authors":"me","tags":["fsd"]},"unlisted":false,"nextItem":{"title":"\uB17C\uAC70 \uC791\uC131, Integrating Evidence in Writing","permalink":"/2025/07/31/integrating-evidence-writing"}}')}}]);