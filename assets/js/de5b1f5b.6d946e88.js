"use strict";(self.webpackChunkgracefullight_github_io=self.webpackChunkgracefullight_github_io||[]).push([["63272"],{89447:function(e,s,n){n.r(s),n.d(s,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>c});var t=n(33178),i=n(69979),a=n(56774);let l={title:"Introduction to AI @003",date:new Date("2025-08-15T23:13:08.242Z"),description:"Introduction to AI @003",authors:"me",tags:["iai"]},o=void 0,r={authorsImageUrls:[void 0]},c=[{value:"Local Search Problem",id:"local-search-problem",level:2},{value:"Feasible region &amp; solution",id:"feasible-region--solution",level:3},{value:"Search Problem vs Local Search Problem",id:"search-problem-vs-local-search-problem",level:3},{value:"Discrete &amp; Continuous Optimization",id:"discrete--continuous-optimization",level:3},{value:"Information needed for Local Search",id:"information-needed-for-local-search",level:3},{value:"Search state-space",id:"search-state-space",level:3},{value:"Advantages",id:"advantages",level:3},{value:"Hill climbing",id:"hill-climbing",level:2},{value:"Variations of HC",id:"variations-of-hc",level:3}];function h(e){let s={annotation:"annotation",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"local-search-problem",children:"Local Search Problem"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:["To find the state that gives the ",(0,i.jsx)(s.strong,{children:"optimal/best value"})," of the ",(0,i.jsx)(s.strong,{children:"evaluation function"})]}),"\n"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"It can be seen as an optimization problem."}),"\n",(0,i.jsx)(s.li,{children:"a computational problem that finds the best solution (a state) that satisfies the given constraints"}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"evaluation function === objective function"})}),"\n",(0,i.jsx)(s.li,{children:"Only cares about the optimal solution/best state without considering the paths to reach the best state (the optimal solution)"}),"\n",(0,i.jsx)(s.li,{children:"Not systematic"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"feasible-region--solution",children:"Feasible region & solution"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Feasible region"}),": the set of all possible or candidate solutions which are the solutions that satisfies the problem's constraints"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Feasible solution"}),": a solution in the feasible region"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"search-problem-vs-local-search-problem",children:"Search Problem vs Local Search Problem"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Path-based vs State-based"}),"\n"]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Aspects"}),(0,i.jsx)(s.th,{children:"Search Problem"}),(0,i.jsx)(s.th,{children:"Local Search Problem"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"State"}),(0,i.jsx)(s.td,{children:"All possible states - state-space landscape"}),(0,i.jsx)(s.td,{children:"Range of decision variables and constraints"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Goal"}),(0,i.jsx)(s.td,{children:"Goal state & goal test"}),(0,i.jsx)(s.td,{children:"Evaluation function & objective function"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Evaluation"}),(0,i.jsx)(s.td,{children:"Measure closeness to goal - distance/fitness"}),(0,i.jsx)(s.td,{children:"Minimize cost or maximize fitness"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Transition/Successor"}),(0,i.jsx)(s.td,{children:"Transition function"}),(0,i.jsx)(s.td,{children:"Successor function"})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"discrete--continuous-optimization",children:"Discrete & Continuous Optimization"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Discrete optimization"}),": optimization problems where the solution space is discrete (e.g., 8 queens problem)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Continuous optimization"}),": optimization problems where the solution space is continuous (e.g., real numbers, any value within a range)"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"information-needed-for-local-search",children:"Information needed for Local Search"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"All possible states"}),": state-space landscape"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Transition function"}),": To find neighbor or successor state"]}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.strong,{children:"Goal state"})}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Objective function"}),": A way to measure how close to the goal state"]}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.strong,{children:"Start state"})}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"search-state-space",children:"Search state-space"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Global Maximum"}),": A state that maximizes the objective function over the entire state space"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Local Maximum"}),": A state that maximizes the objective function within a small area around it."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Plateau"}),": A state such that the objective function is constant in an area around it.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Shoulder"}),": A plateau that has uphill edge."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Flat"}),": A plateau whose edges go downhill."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"advantages",children:"Advantages"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"use little memory"}),"\n",(0,i.jsx)(s.li,{children:"can often find reasonably good solution in large or infinite search spaces"}),"\n",(0,i.jsx)(s.li,{children:"useful for solving pure optimization problems"}),"\n",(0,i.jsx)(s.li,{children:"don't need to know the path to the solution."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"hill-climbing",children:"Hill climbing"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"keeps track of one current state and on each iteration moves to the neighboring state with highest value."}),"\n"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"f"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mi,{children:"m"}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mi,{children:"x"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mo,{children:"\u2212"}),(0,i.jsx)(s.mi,{children:"c"}),(0,i.jsx)(s.mi,{children:"o"}),(0,i.jsx)(s.mi,{children:"s"}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"X"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"f = max(-cost(X))"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"ma"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord",children:"\u2212"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"cos"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.07847em"},children:"X"}),(0,i.jsx)(s.span,{className:"mclose",children:"))"})]})]})]})}),"\n",(0,i.jsxs)(s.li,{children:["Steps","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Evaluate the initial stat"}),"\n",(0,i.jsx)(s.li,{children:"If it is equal to the goal state, return. Otherwise, continue."}),"\n",(0,i.jsx)(s.li,{children:"Find a neighboring state"}),"\n",(0,i.jsx)(s.li,{children:"Evaluate this state. If it is closer to the goal state than before, replace the initial state with this state."}),"\n",(0,i.jsx)(s.li,{children:"Repeat steps 2-4 until it reaches a goal state (local or global maximum) or runs out of time."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["No search tree, No backtracking, Don't look ahead beyond the current state.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"get stuck due to local maxima, plateaus, or ridges."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"variations-of-hc",children:"Variations of HC"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Simple HC"}),": greedy local search which expands the current state and moves on to the best neighbor."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Stochastic HC"}),": choose randomly among the neighbors going uphill."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"First-choice HC"}),": generate random successor until one is better. Good for states with high numbers of successors."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Random restart"}),": conducts a series of hill climbing searches from random initial states until a goal state is found."]}),"\n"]})]})}function d(e={}){let{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},56774:function(e,s,n){n.d(s,{Z:()=>o,a:()=>l});var t=n(52136);let i={},a=t.createContext(i);function l(e){let s=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:s},e.children)}},33178:function(e){e.exports=JSON.parse('{"permalink":"/2025/08/16/introduction-to-ai-003","source":"@site/blog/2025/08/16/introduction-to-ai-003.md","title":"Introduction to AI @003","description":"Introduction to AI @003","date":"2025-08-15T23:13:08.242Z","tags":[{"inline":true,"label":"iai","permalink":"/tags/iai"}],"readingTime":2.42,"hasTruncateMarker":false,"authors":[{"name":"Eunkwang Shin","title":"Owner","url":"https://github.com/gracefullight","socials":{"linkedin":"https://www.linkedin.com/in/gracefullight/","github":"https://github.com/gracefullight"},"description":"Full Stack JavaScript Developer | Half-time Open Sourcerer.","page":{"permalink":"/authors/me"},"imageURL":"https://avatars.githubusercontent.com/u/11773683?v=4","key":"me"}],"frontMatter":{"title":"Introduction to AI @003","date":"2025-08-15T23:13:08.242Z","description":"Introduction to AI @003","authors":"me","tags":["iai"]},"unlisted":false,"nextItem":{"title":"Fundamentals of data analytics @003","permalink":"/2025/08/14/fundamentals-of-data-analytics-003"}}')}}]);