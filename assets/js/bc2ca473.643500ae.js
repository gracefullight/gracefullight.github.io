"use strict";(self.webpackChunkgracefullight_github_io=self.webpackChunkgracefullight_github_io||[]).push([[8322],{49613:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(59496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[u]="string"==typeof e?e:a,l[1]=c;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},53733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(31966),a=(n(59496),n(49613));const o={title:"RxJS \ubcd1\ub82c HTTP \uc694\uccad",authors:"me",tags:["rxjs","javascript"],date:new Date("2021-01-04T19:27:14.000Z")},l=void 0,c={permalink:"/2021/01/04/rxjs-concurrent-http-requests",source:"@site/blog/2021/01/04/rxjs-concurrent-http-requests.md",title:"RxJS \ubcd1\ub82c HTTP \uc694\uccad",description:"\uac1c\uc694",date:"2021-01-04T19:27:14.000Z",formattedDate:"2021\ub144 1\uc6d4 4\uc77c",tags:[{label:"rxjs",permalink:"/tags/rxjs"},{label:"javascript",permalink:"/tags/javascript"}],readingTime:2.12,hasTruncateMarker:!1,authors:[{name:"Eunkwang Shin",title:"Owner",url:"https://github.com/gracefullight",imageURL:"https://avatars.githubusercontent.com/u/11773683?v=4",key:"me"}],frontMatter:{title:"RxJS \ubcd1\ub82c HTTP \uc694\uccad",authors:"me",tags:["rxjs","javascript"],date:"2021-01-04T19:27:14.000Z"},prevItem:{title:"Webpack5 \uc124\uc815",permalink:"/2021/01/15/webpack5-config"},nextItem:{title:"Chrome dev summit 2020 \ube60\ub974\uac8c \ud6d1\uae30",permalink:"/2020/12/12/cds-2020"}},i={authorsImageUrls:[void 0]},p=[{value:"\uac1c\uc694",id:"\uac1c\uc694",level:2},{value:"\uc18c\uc2a4",id:"\uc18c\uc2a4",level:2},{value:"\ud14c\uc2a4\ud2b8",id:"\ud14c\uc2a4\ud2b8",level:2},{value:"\uc5ec\ub2f4",id:"\uc5ec\ub2f4",level:2}],s={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\uac1c\uc694"},"\uac1c\uc694"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\uc575\uade4\ub7ec \uac19\uae30\ub3c4 \ud558\uace0 \ucf54\ub4dc\ub97c \uba38\ub9ac\ub97c \uc368\uc11c \uc77d\uc5b4\uc57c\ud55c\ub2e4\ub294 \uac83 \ub54c\ubb38\uc5d0 \ucd5c\ub300\ud55c \uc548 \uc4f0\uace0 \uc2f6\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\ud558\uc9c0\ub9cc async/await \ub85c \ub3d9\uc2dc\uc131 \uc81c\uc5b4\uac00 \ud798\ub4dc\ubbc0\ub85c \uc774 \ucabd\uc774 \ub2f5\uc778 \uac83 \uac19\ub2e4.")),(0,a.kt)("h2",{id:"\uc18c\uc2a4"},"\uc18c\uc2a4"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ub370\uc774\ud130 \ubc30\uc5f4\uc5d0\uc11c 5\uac1c\uc529 \ub04a\uc5b4\uc11c \ubcd1\ub82c \uc694\uccad\ud55c\ub2e4."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"delay, catchError, delayWhen")," \uc758 \uc870\uac74\ub9cc \ub2e4\ub974\uac8c \ud558\uc5ec \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { EMPTY, from, of } from "rxjs";\nimport {\n  catchError,\n  delay,\n  delayWhen,\n  finalize,\n  map,\n  mergeMap,\n  retry,\n  tap,\n  toArray,\n} from "rxjs/operators";\n\n// \uc288\ub3c4\ucf54\ub4dc\uc784\nconst fetchObservable = (data) => {\n  return from(\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          data,\n        });\n      }, 300);\n    }),\n  );\n};\n\nconst concurrency = 5;\nconst fetchConcurrently$ = from(YOUR_DATA).pipe(\n  mergeMap((token) => {\n    return fetchObservable(YOUR_DATA).pipe(\n      map(({ data }) => data),\n      delay(1000),\n      retry(1),\n      catchError(() => EMPTY),\n    );\n  }, concurrency),\n  map((data) => {\n    return data.id;\n  }),\n  toArray(),\n  delayWhen(() => Promise.resolve()),\n  finalize(() => console.log("done")),\n);\n\nfetchConcurrently$.subscribe((ids) => console.log(ids));\n')),(0,a.kt)("h2",{id:"\ud14c\uc2a4\ud2b8"},"\ud14c\uc2a4\ud2b8"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ud14c\uc2a4\ud2b8 \uc2dc\uc5d0 ",(0,a.kt)("inlineCode",{parentName:"li"},"jest")," \uc5d0\uc11c done callback \uc744 \uc801\uc808\ud788 \ud638\ucd9c\ud574\uc8fc\uc790.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { TestScheduler } from "rxjs/testing";\nimport { mergeMap, map, toArray } from "rxjs/operators";\nimport { from } from "rxjs";\n\ndescribe("fetchConcurrently$ observable", () => {\n  let testScheduler;\n\n  beforeEach(() => {\n    testScheduler = new TestScheduler((actual, expected) => {\n      expect(actual).toEqual(expected);\n    });\n  });\n\n  it("should produce expected output", () => {\n    testScheduler.run((helpers) => {\n      const { cold, expectObservable } = helpers;\n\n      // Mock fetchObservable function\n      const fetchObservable = (data) => {\n        return from([data]);\n      };\n\n      // Mock YOUR_DATA\n      const YOUR_DATA = [1, 2, 3, 4, 5];\n\n      const concurrency = 5;\n      const fetchConcurrently$ = from(YOUR_DATA).pipe(\n        mergeMap((token) => {\n          return fetchObservable(token).pipe(\n            map((data) => data),\n            // ... other operators\n          );\n        }, concurrency),\n        map((data) => data),\n        toArray(),\n      );\n\n      const expectedMarble = "(abcde|)";\n      const expectedValues = { a: 1, b: 2, c: 3, d: 4, e: 5 };\n\n      expectObservable(fetchConcurrently$).toBe(expectedMarble, expectedValues);\n    });\n  });\n});\n')),(0,a.kt)("h2",{id:"\uc5ec\ub2f4"},"\uc5ec\ub2f4"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"marble \ud14c\uc2a4\ud2b8\ub3c4 \uc791\uc131\ud574\ubcf4\uace0 \uc2f6\uc5c8\ub294\ub370 \ub808\ud37c\ub7f0\uc2a4\ub85c \uc0bc\uc744\ub9cc\ud55c \ubb38\uc11c\ub97c \ubabb \ucc3e\uc544\uc11c \uc544\uc27d\ub2e4.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"GPT4\uac00 \uc704\ucc98\ub7fc \uc798 \uc9dc\uc92c\ub2e4."))),(0,a.kt)("li",{parentName:"ul"},"\ub9e4\ubc88 of \uc640 from \uc744 \ud5f7\uac08\ub9ac\ub294\ub370, \uc804\uc790\ub294 \ud558\ub098\uc529\uc774\uace0 \ud6c4\uc790\ub294 \ub369\uc5b4\ub9ac\ub2e4.")))}m.isMDXComponent=!0}}]);