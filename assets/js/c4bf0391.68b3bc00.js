"use strict";(self.webpackChunkgracefullight_github_io=self.webpackChunkgracefullight_github_io||[]).push([["10002"],{83898:function(e,n,s){s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>o});var t=s(62660),a=s(69979),r=s(59338);let i={title:"Fundamentals of software development @006",date:new Date("2025-09-01T00:09:15.360Z"),description:"Fundamentals of software development @006",authors:"me",tags:["fsd"]},l=void 0,d={authorsImageUrls:[void 0]},o=[{value:"OOP vs Procedural Programming",id:"oop-vs-procedural-programming",level:2},{value:"OOP",id:"oop",level:3},{value:"Procedural Programming",id:"procedural-programming",level:3},{value:"Classes",id:"classes",level:2},{value:"Classes Py",id:"classes-py",level:3},{value:"Classes Java",id:"classes-java",level:3},{value:"Packages",id:"packages",level:2},{value:"Packages Java",id:"packages-java",level:3},{value:"Modules Py",id:"modules-py",level:3}];function c(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"oop-vs-procedural-programming",children:"OOP vs Procedural Programming"}),"\n",(0,a.jsx)(n.h3,{id:"oop",children:"OOP"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"a programming paradigm built around the concept of objects, which contain data and code to manipulate data."}),"\n",(0,a.jsx)(n.li,{children:"The idea to model real-world entities and their interactions."}),"\n",(0,a.jsx)(n.li,{children:"Global Data (fields) are enclosed in the objects."}),"\n",(0,a.jsx)(n.li,{children:"Program components/tasks are easily divided across the development team / Requires more planning and design preparation"}),"\n",(0,a.jsx)(n.li,{children:"Easier to manage and maintain dependencies between objects / OOP programs are much larger and complex"}),"\n",(0,a.jsx)(n.li,{children:"Objects export the interface and hide the implementation and data / Tend to use more memory and GPU"}),"\n",(0,a.jsx)(n.li,{children:"Code is highly reusable and easy to scale and distribute / Making changes in one class potentially impact others, which can complicate the development of the code."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'xychart\n    title "OOP Software"\n    x-axis ["Analyse", "Design", "Code", "Debug", "Extend"]\n    y-axis "Cost/Time" 0 --\x3e 6\n    bar [2, 5, 3, 2, 1]'}),"\n",(0,a.jsx)(n.h3,{id:"procedural-programming",children:"Procedural Programming"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"the concept of procedure calls by structuring the program around procedures. (or functions/subroutines)"}),"\n",(0,a.jsx)(n.li,{children:"a sequential manner unless directed otherwise."}),"\n",(0,a.jsx)(n.li,{children:"Global data (elements) is exposed to all the functions."}),"\n",(0,a.jsx)(n.li,{children:"Easier to compile and interpret / Difficult to scale or extend"}),"\n",(0,a.jsx)(n.li,{children:"Straightforward and simpler to code / Dependencies between elements are unclear and not well-structured."}),"\n",(0,a.jsx)(n.li,{children:"Less memory requirements / Data is exposed and insecure due to its exposure across the whole program"}),"\n",(0,a.jsx)(n.li,{children:"Easy to track the program flow / Hard to divide the work among programmers in a team."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'xychart\n    title "Procedural Programming"\n    x-axis ["Analyse", "Design", "Code", "Debug", "Extend"]\n    y-axis "Cost/Time" 0 --\x3e 6\n    bar [1, 2, 4, 5, 6]'}),"\n",(0,a.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A class is a template/blueprint used to create objects"}),"\n"]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"java"}),(0,a.jsx)(n.th,{children:"python"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"a pure OOP language"}),(0,a.jsx)(n.td,{children:"supports OOP"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"code must be written in classes"}),(0,a.jsx)(n.td,{children:"classes are optional"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:["executable class must have ",(0,a.jsx)(n.code,{children:"main()"})]}),(0,a.jsx)(n.td,{children:"scripts run without including a class"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Encapsulation can be enforced by declaring fields as private"}),(0,a.jsx)(n.td,{children:"fields (global variables) are public by default"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Visibility is managed through access modifiers"}),(0,a.jsx)(n.td,{children:'N/A ("_" to identify private data attributes, but still accessible)'})]})]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"class <class-name> (<extend - superclass>):\n    <variable-name> = <value> #Class fields - data members\n\n    def __init(self, <parameters>): #class constructor - object sbuilder\n        <code>\n\n    <method-name> (self, <parameters>): #methods\n        <code>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"classes-py",children:"Classes Py"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Keywords"}),(0,a.jsx)(n.th,{children:"Functions"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"class"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"__init__()"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"self"}),": keyword used to refer to object properties"]}),(0,a.jsx)(n.td,{children:"del: the function is used to delete an object"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"pass"}),": keyword used to occupy no-code placement in a function"]}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"__str__()"}),": The function is used to return string representation of instances"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"cls"}),": keyword used to refer to class properties"]}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"super()"}),": the function is used call a parent method in a child class"]})]})]})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Accessors: functions (with no parameters) in a Python class that provide access to the data attributes of an object.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"known as getter methods, are named starting with the verb get, followed by the field name, which should start with an uppercase letter."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Mutators: procedures (with parameter) in a Python class that enable the developer to modify the values of object attributes.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"known as setter methods, are named starting with the verb set, followed by the field name, which should start with an uppercase letter."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"def get<Variable> ():\n    return self.<field>\n\ndef set<Variable> (self, value):\n    self.<field> = value\n"})}),"\n",(0,a.jsx)(n.h3,{id:"classes-java",children:"Classes Java"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class Bank {\n  private Customer customer;\n  private String branch;\n\n  public Bank() {\n    customer = new Customer();\n  }\n\n  public Bank(String name) {\n    this();\n    this.branch = name;\n  }\n\n  public boolean find(Bank bank) {\n    return this.branch.equals(bank.branch);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"packages",children:"Packages"}),"\n",(0,a.jsx)(n.h3,{id:"packages-java",children:"Packages Java"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"used to group related classes"}),"\n",(0,a.jsx)(n.li,{children:"like folders containing files (classes)"}),"\n",(0,a.jsx)(n.li,{children:"either Java defined or user-defined"}),"\n",(0,a.jsx)(n.li,{children:"used to write maintainable and portable code and to avoid class name conflicts."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"modules-py",children:"Modules Py"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"used to grou prelated functio nand classes together"}),"\n",(0,a.jsx)(n.li,{children:"normal Python scripts that are used into other scripts"}),"\n",(0,a.jsx)(n.li,{children:"either Python defined or user-defined"}),"\n",(0,a.jsx)(n.li,{children:"used to write maintainable and portable code to improve reusability"}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},59338:function(e,n,s){s.d(n,{Z:()=>l,a:()=>i});var t=s(52136);let a={},r=t.createContext(a);function i(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},62660:function(e){e.exports=JSON.parse('{"permalink":"/2025/09/01/fundamentals-of-software-development-006","source":"@site/blog/2025/09/01/fundamentals-of-software-development-006.md","title":"Fundamentals of software development @006","description":"Fundamentals of software development @006","date":"2025-09-01T00:09:15.360Z","tags":[{"inline":true,"label":"fsd","permalink":"/tags/fsd"}],"readingTime":3.06,"hasTruncateMarker":false,"authors":[{"name":"Eunkwang Shin","title":"Owner","url":"https://github.com/gracefullight","socials":{"linkedin":"https://www.linkedin.com/in/gracefullight/","github":"https://github.com/gracefullight"},"description":"Full Stack JavaScript Developer | Half-time Open Sourcerer.","page":{"permalink":"/authors/me"},"imageURL":"https://avatars.githubusercontent.com/u/11773683?v=4","key":"me"}],"frontMatter":{"title":"Fundamentals of software development @006","date":"2025-09-01T00:09:15.360Z","description":"Fundamentals of software development @006","authors":"me","tags":["fsd"]},"unlisted":false,"prevItem":{"title":"Open X-Embodiment review","permalink":"/2025/09/01/open-x-embodiment-review"},"nextItem":{"title":"\u03C00 Review","permalink":"/2025/09/01/pi-zero-reivew"}}')}}]);