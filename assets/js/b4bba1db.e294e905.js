"use strict";(self.webpackChunkgracefullight_github_io=self.webpackChunkgracefullight_github_io||[]).push([["9205"],{46826:function(e,n,i){i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var s=i(92102),a=i(69979),t=i(56774);let l={title:"Fundamentals of software development @002",date:new Date("2025-08-04T02:49:53.887Z"),description:"Fundamentals of software development @002",authors:"me",tags:["fsd"]},r=void 0,c={authorsImageUrls:[void 0]},o=[{value:"Classes &amp; Objects",id:"classes--objects",level:2},{value:"Class",id:"class",level:3},{value:"Object",id:"object",level:3},{value:"Procedure &amp; Function",id:"procedure--function",level:3},{value:"Object-Oriented Paradigm Principles",id:"object-oriented-paradigm-principles",level:2},{value:"Abstraction",id:"abstraction",level:3},{value:"Encapsulation",id:"encapsulation",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Polymorphism",id:"polymorphism",level:3},{value:"Object-Oriented Design",id:"object-oriented-design",level:2},{value:"Identify classes",id:"identify-classes",level:3},{value:"UML Class diagram",id:"uml-class-diagram",level:2},{value:"Associations",id:"associations",level:3},{value:"Multiplicity",id:"multiplicity",level:4},{value:"Recursive or reflexive association",id:"recursive-or-reflexive-association",level:4},{value:"Attributes",id:"attributes",level:4},{value:"Association Classes",id:"association-classes",level:4},{value:"Generalization &amp; Specialization",id:"generalization--specialization",level:3},{value:"Benefits of generalization",id:"benefits-of-generalization",level:3},{value:"Class inheritance",id:"class-inheritance",level:3},{value:"Subclass",id:"subclass",level:3},{value:"Superclass",id:"superclass",level:3},{value:"Abstract Class",id:"abstract-class",level:3},{value:"Interface &amp; Realization",id:"interface--realization",level:3},{value:"Aggregation",id:"aggregation",level:3},{value:"Composition",id:"composition",level:3},{value:"Dependency",id:"dependency",level:3},{value:"Visibility",id:"visibility",level:3},{value:"Example",id:"example",level:3},{value:"UML Tools",id:"uml-tools",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"classes--objects",children:"Classes & Objects"}),"\n",(0,a.jsx)(n.h3,{id:"class",children:"Class"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A template that defines the attributes and methods of an object, which can be used to create many objects."}),"\n",(0,a.jsx)(n.li,{children:"Name of the class is noun."}),"\n",(0,a.jsx)(n.li,{children:"Functions are defined in the class, containing the function data."}),"\n",(0,a.jsx)(n.li,{children:"Many objects can be created from the same class."}),"\n",(0,a.jsx)(n.li,{children:"A class can be inherited by many sub-classes"}),"\n",(0,a.jsx)(n.li,{children:"A child class can have one or more parent classes. (super-classes)"}),"\n",(0,a.jsx)(n.li,{children:"Encapsulated data"}),"\n",(0,a.jsx)(n.li,{children:"Behaviors of a class are exposed while the implementation is hidden."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"object",children:"Object"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"An instance of a class, created the class template during runtime."}),"\n",(0,a.jsx)(n.li,{children:"Object-oriented software is composed of many objects"}),"\n",(0,a.jsx)(n.li,{children:"a composite data type identified by its attributes (fields) and behaviors (functions), which are defined in the class."}),"\n",(0,a.jsx)(n.li,{children:"object-oriented design analysis: to identify the classes and relationships between the classes to model how the system would work."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"procedure--function",children:"Procedure & Function"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Aspect"}),(0,a.jsx)(n.th,{children:"Procedure"}),(0,a.jsx)(n.th,{children:"Function"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Returns value?"}),(0,a.jsxs)(n.td,{children:["\u274C Usually does ",(0,a.jsx)(n.strong,{children:"not"})," return a value"]}),(0,a.jsxs)(n.td,{children:["\u2705 Usually ",(0,a.jsx)(n.strong,{children:"returns"})," a value"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Purpose"}),(0,a.jsx)(n.td,{children:"Perform an action"}),(0,a.jsx)(n.td,{children:"Compute and return a result"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"object-oriented-paradigm-principles",children:"Object-Oriented Paradigm Principles"}),"\n",(0,a.jsx)(n.h3,{id:"abstraction",children:"Abstraction"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"hides the internal implementation of functions and expose to other class the behavior of those functions."}),"\n",(0,a.jsx)(n.li,{children:"Data abstraction: hide the variables stored the data and only expose the values."}),"\n",(0,a.jsx)(n.li,{children:"Function abstraction: hide the function code and only export the function behavior."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"encapsulation",children:"Encapsulation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"a fundamental principle of OOP, increases data and code security, enhances performance by reducing object interactions."}),"\n",(0,a.jsx)(n.li,{children:"minimize the number of interactions from outside."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"inheritance",children:"Inheritance"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"allows classes to have sub-classes."}),"\n",(0,a.jsx)(n.li,{children:"a parent class can have many children."}),"\n",(0,a.jsx)(n.li,{children:"a child class can have more than one parent."}),"\n",(0,a.jsx)(n.li,{children:"a child class inherits their parent class and can also override them."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"polymorphism",children:"Polymorphism"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"more of the same type of object can be used interchangeably."}),"\n",(0,a.jsx)(n.li,{children:"object of different types to be treated as objects of a common parent."}),"\n",(0,a.jsx)(n.li,{children:"multiple object types with the same parent can implement the same function in different ways."}),"\n",(0,a.jsx)(n.li,{children:"multiple object types with the same parent can use the same attributes with different values."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"object-oriented-design",children:"Object-Oriented Design"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The process of designing a software using oop."}),"\n",(0,a.jsx)(n.li,{children:"Identify the classes\n-> Identify the classes' attributes and behaviors\n-> Identify the how classes interact with each other and create a visual class model"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"identify-classes",children:"Identify classes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Classes are derived from use cases and actors described in the requirement analysis process."}),"\n",(0,a.jsx)(n.li,{children:"Classes should be identified exactly as needed."}),"\n",(0,a.jsx)(n.li,{children:"Reduce coupling and enable extensibility."}),"\n",(0,a.jsx)(n.li,{children:"Identifying a class always requires to identify the fields and methods."}),"\n",(0,a.jsx)(n.li,{children:"A class can use the methods of another class.\n-> one class (the client) uses or depends on another class (the supplier)."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"uml-class-diagram",children:"UML Class diagram"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"UML visual representation of the object-oriented software system."}),"\n",(0,a.jsx)(n.li,{children:"Describes the attributes and operations of classes, relationships, and any constraints."}),"\n",(0,a.jsx)(n.li,{children:"Used as a plan to construct executable code and define the way in which objects may interact."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n    Account\n    class Account {\n        +String accountNumber\n        +double balance\n        +deposit(double amount)\n        +withdraw(double amount)\n    }"}),"\n",(0,a.jsx)(n.h3,{id:"associations",children:"Associations"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"a relationship between classes indicating a meaningful connection."}),"\n",(0,a.jsxs)(n.li,{children:["Labelled by","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Association name"}),"\n",(0,a.jsx)(n.li,{children:"Role name"}),"\n",(0,a.jsx)(n.li,{children:"Multiplicity"}),"\n",(0,a.jsx)(n.li,{children:"Navigability"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Company "1" --\x3e "*" Person : employs'}),"\n",(0,a.jsx)(n.h4,{id:"multiplicity",children:"Multiplicity"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"how many instances of type A can be associated with on instance of type B."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Store "1" --\x3e "*" ItemID : Stocks\n  University "1" --\x3e "0..*" Student : enrolls\n  Team "1" --\x3e "1..*" Player : has\n  Course "1" --\x3e "1..40" Student : limits\n  Hand "1" --\x3e "5" Finger : has\n  Dice "1" --\x3e "3,5,6" Face : shows'}),"\n",(0,a.jsx)(n.h4,{id:"recursive-or-reflexive-association",children:"Recursive or reflexive association"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"a class can have an association with itself."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Course -- "*" Course : prerequisite'}),"\n",(0,a.jsx)(n.h4,{id:"attributes",children:"Attributes"}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  House "1" --\x3e "1" Address\n\n  class House2["House"] {\n    address: Address\n  }'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["m",":m"," association can be divided into two 1",":m"," associations."]}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Student "*" -- "*" Course : Enrolment\n\n  Student2 "1" -- "*" Enrolment2\n  Enrolment2 "*" -- "1" Course2\n\n  class Student2["Student"] {\n\n  }\n  class Enrolment2["Enrolment"] {\n    student\n    course\n    labSession\n    mark\n  }\n  class Course2["Course"] {\n    \n  }'}),"\n",(0,a.jsx)(n.h4,{id:"association-classes",children:"Association Classes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"An attribute is related to an association."}),"\n",(0,a.jsx)(n.li,{children:"Instance of the association class have a life-time dependency on the association."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Company "*" -- "*" Person : employs\n  Company .. Employment\n  Person .. Employment\n\n  class Employment {\n    salary\n  }\n\n  note for Employment "A person may have employment with several companies"'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"an associative type should exist in the background somewhere."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Subject "1" -- "*" Enrollment\n  Enrollment "*" -- "1" Student\n\n  class Enrollment {\n    Student\n    Subject\n  }'}),"\n",(0,a.jsx)(n.h3,{id:"generalization--specialization",children:"Generalization & Specialization"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Generalization: the activity of identifying commonalities among concepts and defining superclass (general concept) and subclass (specialized concepts) relationships."}),"\n",(0,a.jsx)(n.li,{children:'"is-a" relationship'}),"\n",(0,a.jsx)(n.li,{children:"a subclass inherits from a superclass."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"benefits-of-generalization",children:"Benefits of generalization"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Code Reusability"}),"\n",(0,a.jsx)(n.li,{children:"Cleaner/Simplified design"}),"\n",(0,a.jsx)(n.li,{children:"Scalability"}),"\n",(0,a.jsx)(n.li,{children:"Extensibility"}),"\n",(0,a.jsx)(n.li,{children:"Easier Maintenance"}),"\n",(0,a.jsx)(n.li,{children:"Testability"}),"\n",(0,a.jsx)(n.li,{children:"Modularity"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"class-inheritance",children:"Class inheritance"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"same as generalization and specialization."}),"\n",(0,a.jsx)(n.li,{children:"the subclasses inherit the attributes and methods of the superclasses."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n  direction BT\n  CashPayment --|> Payment\n  CreditCardPayment --|> Payment\n  CheckPayment --|> Payment\n\n  class Payment {\n    amount: Money\n  }"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"When a hierarchy is created, statements about the superclass apply to subclasses."}),"\n",(0,a.jsx)(n.li,{children:"A conceptual subclass should be a member of the set of the superclass."}),"\n",(0,a.jsx)(n.li,{children:"The conceptual subclass is a kind of superclass."}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"<subclass> is a <superclass>"})}),"\n",(0,a.jsxs)(n.li,{children:["Every instance of the ",(0,a.jsx)(n.code,{children:"<subclass>"})," can be viewed as an instance of the ",(0,a.jsx)(n.code,{children:"<superclass>"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"subclass",children:"Subclass"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"has additional attributes of interest."}),"\n",(0,a.jsx)(n.li,{children:"has additional associations of interest."}),"\n",(0,a.jsx)(n.li,{children:"is handled differently than the superclass or other subclasses."}),"\n",(0,a.jsx)(n.li,{children:"represents an object that behaves differently than the superclass or other subclasses."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"superclass",children:"Superclass"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Create a conceptual superclass when:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The potential conceptual subclasses represent variations of a similar concept."}),"\n",(0,a.jsx)(n.li,{children:"The subclass fully conforms to the attributes and associations of its superclass. (100% rule)"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"All subclasses have the same attributes and operations which can be factored out and expressed in the superclass."}),"\n",(0,a.jsx)(n.li,{children:"All subclasses have the same associations which can be factored out and related to the superclass."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction BT\n  class Payment {\n    amount: Money\n  }\n\n  CashPayment --|> Payment\n  CreditPayment --|> Payment\n  CheckPayment --|> Payment\n\n  CreditCard "1" -- "*" CreditPayment: Identifies credit with\n\n  Check "1" -- CheckPayment: Paid with\n\n  Payment "1" -- "1" Sale : Paid for\n\n  note for CreditPayment "additional associations"\n\n  note for CheckPayment "additional associations"\n\n  note for Payment "superclass justified by common attributes and associations"'}),"\n",(0,a.jsx)(n.h3,{id:"abstract-class",children:"Abstract Class"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"a parent class that cannot be instantiated."}),"\n",(0,a.jsx)(n.li,{children:"at least one of its operations is abstract."}),"\n",(0,a.jsx)(n.li,{children:"an abstract operation has its signature defined in the abstract parent class, but the implementation is defined in the child class."}),"\n",(0,a.jsx)(n.li,{children:"create a high-level modelling vocabulary."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n  direction BT\n  class VideoMedium {\n    <<Abstract>>\n    rentalCharge()*: Double\n  }\n\n  class VideoTape {\n    VideoTape()\n    rentalCharge(): Double\n  }\n\n  class VideoDisk {\n    VideoDisk()\n    rentalCharge(): Double\n  }\n\n  VideoTape --|> VideoMedium\n  VideoDisk --|> VideoMedium"}),"\n",(0,a.jsx)(n.h3,{id:"interface--realization",children:"Interface & Realization"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"a class with no attributes."}),"\n",(0,a.jsx)(n.li,{children:"can't be instantiated."}),"\n",(0,a.jsx)(n.li,{children:"simply declares a contract that may be realized by zero or more classes."}),"\n",(0,a.jsx)(n.li,{children:"to separate the specification from its implementation."}),"\n",(0,a.jsx)(n.li,{children:"only defines a specification for what the class should do and it never implies how it should do it."}),"\n",(0,a.jsx)(n.li,{children:"the class implementing an interface has a realization relationship with the interface."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n  direction BT\n  class Borrow {\n    <<interface>>\n    +borrow\n    +return\n    +isOverdue\n  }\n\n  Book ..|> Borrow\n  DVD ..|> Borrow"}),"\n",(0,a.jsx)(n.h3,{id:"aggregation",children:"Aggregation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"a type of whole-part relationship in which the aggregate is made up of many parts."}),"\n",(0,a.jsx)(n.li,{children:"Signified with a hollow diamond."}),"\n",(0,a.jsx)(n.li,{children:"implies the part may be in many composite instances."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  Crate "0..1" o-- "*" Bottle\n  Playlist "0..*" o-- "*" Song'}),"\n",(0,a.jsx)(n.h3,{id:"composition",children:"Composition"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"a stronger form of aggregation."}),"\n",(0,a.jsx)(n.li,{children:"the multiplicity at the composite end may be at most one"}),"\n",(0,a.jsx)(n.li,{children:"Signified with a filled diamond."}),"\n",(0,a.jsx)(n.li,{children:"There is a create-delete dependency. Their lifetime is bound within the lifetime of the composite."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction LR\n  House "1" *-- "1..*" Room\n  Book "1" *-- "1..*" Page'}),"\n",(0,a.jsx)(n.h3,{id:"dependency",children:"Dependency"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"a relationship between two or more model elements whereby a change to one element"}),"\n",(0,a.jsxs)(n.li,{children:["The most common dependency stereotype is ",(0,a.jsx)(n.code,{children:"<<use>>"}),", which simply states that the client makes use of the supplier in some way."]}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n  direction LR\n  class A {\n    add(b: B)\n    bar() B\n  }\n  A ..> B: uses"}),"\n",(0,a.jsx)(n.h3,{id:"visibility",children:"Visibility"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"+"})," public"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-"})," private"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"#"})," protected"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"~"})," package"]}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n  class Customer {\n    #id int\n    -savings Account\n    \n    +deposit(amount) void\n    +withdraw(amount) void\n    +transfer(loan, amount) void\n    +balance() double\n  }"}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n  direction BT\n  class Account {\n    +number\n    +balance\n\n    +deposit()\n    +withdraw()\n    createTransaction()\n  }\n\n  CurrentAccount --|> Account\n  SavingAccount --|> Account\n  CurrentAccount "1" -- "1" SavingAccount : Savings Checking\n\n  class CurrentAccount {\n    +accountNo\n    +balance\n\n    +withdraw()\n  }\n\n  class SavingAccount {\n    +accountNo\n    +balance\n  }\n\n  Account "1" -- "*" ATMTransactions : Account Transaction\n\n  class ATMTransactions {\n    +transactionId\n    +date\n    +type\n    +amount\n    +postBalance\n\n    +modifies()\n  }\n\n  Customer "1" -- "1,2" Account : Has\n  class Customer {\n    +name\n    +address\n    +dob\n    +cardNumber\n    +pin\n\n    +verifyPassword()\n  }\n\n  Account --o Bank\n  class Bank {\n    +code\n    +address\n    +manage()\n    +maintain()\n  }\n\n  ATM --o Bank\n  class ATM {\n    +location\n    +managedBy\n    +identifies()\n    +transactions()\n  }\n\n  Customer --\x3e ATM\n  Account --\x3e ATM'}),"\n",(0,a.jsx)(n.h2,{id:"uml-tools",children:"UML Tools"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.draw.io",children:"Draw.io"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.lucidchart.com",children:"Lucidchart"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.visual-paradigm.com",children:"Visual Paradigm"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://staruml.io",children:"StarUML"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://creately.com",children:"Creately"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.planttext.com/",children:"PlantUML"})}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},56774:function(e,n,i){i.d(n,{Z:()=>r,a:()=>l});var s=i(52136);let a={},t=s.createContext(a);function l(e){let n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},92102:function(e){e.exports=JSON.parse('{"permalink":"/2025/08/04/fundamentals-of-software-development-002","source":"@site/blog/2025/08/04/fundamentals-of-software-development-002.md","title":"Fundamentals of software development @002","description":"Fundamentals of software development @002","date":"2025-08-04T02:49:53.887Z","tags":[{"inline":true,"label":"fsd","permalink":"/tags/fsd"}],"readingTime":6.86,"hasTruncateMarker":false,"authors":[{"name":"Eunkwang Shin","title":"Owner","url":"https://github.com/gracefullight","socials":{"linkedin":"https://www.linkedin.com/in/gracefullight/","github":"https://github.com/gracefullight"},"description":"Full Stack JavaScript Developer | Half-time Open Sourcerer.","page":{"permalink":"/authors/me"},"imageURL":"https://avatars.githubusercontent.com/u/11773683?v=4","key":"me"}],"frontMatter":{"title":"Fundamentals of software development @002","date":"2025-08-04T02:49:53.887Z","description":"Fundamentals of software development @002","authors":"me","tags":["fsd"]},"unlisted":false,"prevItem":{"title":"Introduction to Artificial Intelligence @001","permalink":"/2025/08/05/introduction-to-ai-001"},"nextItem":{"title":"\uB17C\uAC70 \uC791\uC131, Integrating Evidence in Writing","permalink":"/2025/07/31/integrating-evidence-writing"}}')}}]);