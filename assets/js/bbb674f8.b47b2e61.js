"use strict";(self.webpackChunkgracefullight_github_io=self.webpackChunkgracefullight_github_io||[]).push([["21693"],{83236:function(e,n,t){t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var i=t(94990),s=t(65813),l=t(661);let a={title:"FSD +007",date:new Date("2025-09-08T00:05:07.256Z"),description:"Fundamentals of software development +007",authors:"me",tags:["fsd"]},r,o={authorsImageUrls:[void 0]},d=[{value:"Collection",id:"collection",level:2},{value:"Python List",id:"python-list",level:3},{value:"Python Set",id:"python-set",level:3},{value:"Python Tuple",id:"python-tuple",level:3},{value:"Python Dictionary",id:"python-dictionary",level:3},{value:"Java List",id:"java-list",level:3},{value:"Java Set",id:"java-set",level:3},{value:"Java Map",id:"java-map",level:3},{value:"Operation Patterns",id:"operation-patterns",level:2}];function c(e){let n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"collection",children:"Collection"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"a data sturcucture that groups multiple elemtns togehter logically."}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"referenced by the collection name, and its elements are accessed using indexing or look up methods."}),"\n",(0,s.jsx)(n.li,{children:"some collections allow dynamic sizing, expanding and shrinking with the data, others have a fixed size."}),"\n",(0,s.jsxs)(n.li,{children:["can store mixed data types.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Java collections are typically type-safe using generics."}),"\n",(0,s.jsx)(n.li,{children:"Python uses dynamic typing."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"python-list",children:"Python List"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'mylist = ["Tom", 30, 112.5]\nlen(mylist)\nmylist[index]\nmylist.append(item)\nmylist.insert(index, item)\n# returns a slice of a list from first to last-1\nmylist[first:last]\nmylist.index(item)\n\n# replaces items from first to last-1 with a list\nmylist[first:last] = [list-values] \n# adds list 2 at the end of list 1\nmylist = list1 + list2\n# adds list 2 at the end of list 1\nlist1.extend(list2)\n\nmylist.remove(item)\nmylist.pop(index)\nmylist.pop()\ndel mylist[index]\ndel mylist\nmylist.clear()\n\n# Sorts the list alphanumerically, ascending\nmylist.sort()\nmylist.sort(reverse =True)\nmylist.reverse()\nmylist.count()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"python-set",children:"Python Set"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"unordered, not indexed."}),"\n",(0,s.jsx)(n.li,{children:"mutable, unique."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"myset = { 'hello', 5, True, 3.5 }\n\nfor x in myset:\n  print(x)\n\nmyset.add(item)\n# Merges myset iwth the otherset, rtaining unique values\nmyset.update(otherset)\n# Adds other set items to a set (only unique items are retained)\nmynewset = myset.union(otherset)\n# Retain only the items that exists into set1 and set2\nmyset = set1.intersection(set2)\n\n# report error if item not found\nmyset.remove(item)\nmyset.discard(item)\n\nmyset.pop()\nmyset.clear()\ndel myset\n"})}),"\n",(0,s.jsx)(n.h3,{id:"python-tuple",children:"Python Tuple"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"a cllection of items of any type"}),"\n",(0,s.jsx)(n.li,{children:"ordered, indexed"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"unchangable"}),", once a tuple is created the elemets are fixed"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'mytuple = ("Tom", 30, 112.5)\nlen(mytuple)\nmytuple[index]\nmytuple[first:last]\nmytuple = tuple + tuple2\n'})}),"\n",(0,s.jsx)(n.h3,{id:"python-dictionary",children:"Python Dictionary"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"a collection of items represented as key-value pairs"}),"\n",(0,s.jsx)(n.li,{children:"unordered, indexed by uniaue keys"}),"\n",(0,s.jsx)(n.li,{children:"itmes are mutable"}),"\n",(0,s.jsx)(n.li,{children:"allow duplicate values but not duplicate keys"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'mydata = {\n  "name": "Tom",\n  "age": 30,\n  "role": "admin"\n}\n\nmydata.keys()\nlen(mydata)\nmydata[key]\nmydata[key] = new-value\ndel mydata[key]\ndel mydata\n\n# Deletes an entry associated with key\nval = mydata.pop(key)\n# Updates/Inserts { k: v } entry into the dictionary\nmydata.update({ k: v })\n'})}),"\n",(0,s.jsx)(n.h3,{id:"java-list",children:"Java List"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"an interface of the Java Collection Framework (JCF)"}),"\n",(0,s.jsx)(n.li,{children:"cannot be instantiated."}),"\n",(0,s.jsxs)(n.li,{children:["common implementation of List interface","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"ArrayList"}),"\n",(0,s.jsx)(n.li,{children:"LinkedList"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<Integer> numbers = new ArrayList<>();\nList<String> names = new LinkedList<>();\n\nnumbers.get(0);\nnumbers.get(numbers.size() - 1);\n\nnames.get(indexOf("Hello"));\nnames.get(lastIndexOf("Hello"));\n\nnumbers.add(5);\nnames.remove("Hello");\nnames.remove(indexOf("Hello"));\n\nnumbers.removeAll(<another list>);\n// set(2, 12) replaces the item at index 2 with 12\nnumbers.set(2, 12);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"java-set",children:"Java Set"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"an interface of the Java Collection Framework (JCF)"}),"\n",(0,s.jsx)(n.li,{children:"unordered, unique objects."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'HashSet<String> names = new HashSet();\nHashSet<String> names = new HashSet(Array.asList("Tom", "Jerry", "Mickey"));\n\nHashSet<String> names = new HashSet();\nArrayList list1 = new ArrayList();\nArrayList list2 = new ArrayList();\n\nlist1.add("Tom");\nlist1.add("Jerry");\n\nnames.addAll(list1);\nnames.addAll(list2);\n\nnames.remove("Tom");\nboolean isRemoved = names.remove("Tom");\n\nfor (String name : names) {\n  System.out.println(name);\n}\n\nIterator<String> it = names.iterator();\nwhile (it.hasNext()) {\n  System.out.println(it.next());\n}\n\nnames.clear();\nnames.isEmpty();\nnames.contains("Tim");\nnames.size();\nnames.removeAll(set2);\nnames.containsAll(set2);\n// Retain set2 elements and discard the rest\nnames.retainAll(set2);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"java-map",children:"Java Map"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"interface from java.util stores data as a keiy-value pairs"}),"\n",(0,s.jsx)(n.li,{children:"contain unique keys that are associated with specific values."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'HashMap<Integer, String> people = new HashMap<>();\npeople.put(1, "Tom");\npeople.put(2, "Jerry");\npeople.put(3, "Mickey");\n\npeople.putIfAbsent(2, "Donald");\nSystem.out.println(people.get(2));\n\npeople.put(2, "Lucy");\npeople.replace(2, "Amy");\npeople.remove(2);\n\nSystem.out.prinln(people.keySet());\nSystem.out.println(people.values());\n\npeople.clear();\npeople.isEmpty();\npeople.containsKey(2);\npeople.size();\npeople.getOrDefault(50, "Unknown");\n// Checks if the value is mapped with one or more keys\npeople.containsValue("Jim");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"operation-patterns",children:"Operation Patterns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Finding an item in a list: Using the lookup pattern"}),"\n",(0,s.jsx)(n.li,{children:"Finding multiple items in a list: Using the updated-lookup pattern"}),"\n",(0,s.jsx)(n.li,{children:"Removing certain items from a list: Using the remove-all pattern"}),"\n"]})]})}function m(e={}){let{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},661:function(e,n,t){t.d(n,{R:()=>a,x:()=>r});var i=t(59729);let s={},l=i.createContext(s);function a(e){let n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}},94990:function(e){e.exports=JSON.parse('{"permalink":"/2025/09/08/fundamentals-of-software-development-007","source":"@site/blog/2025/09/08/fundamentals-of-software-development-007.md","title":"FSD +007","description":"Fundamentals of software development +007","date":"2025-09-08T00:05:07.256Z","tags":[{"inline":true,"label":"fsd","permalink":"/tags/fsd"}],"readingTime":2.96,"hasTruncateMarker":false,"authors":[{"name":"Eunkwang Shin","title":"Owner","url":"https://github.com/gracefullight","socials":{"linkedin":"https://www.linkedin.com/in/gracefullight/","github":"https://github.com/gracefullight","email":"mailto:gracefullight.dev@gmail.com"},"description":"Full Stack JavaScript Developer | Half-time Open Sourcerer.","page":{"permalink":"/authors/me"},"imageURL":"https://avatars.githubusercontent.com/u/11773683?v=4","key":"me"}],"frontMatter":{"title":"FSD +007","date":"2025-09-08T00:05:07.256Z","description":"Fundamentals of software development +007","authors":"me","tags":["fsd"]},"unlisted":false,"prevItem":{"title":"Vocabulary for AI +007","permalink":"/vocab/vocab-ai-007"},"nextItem":{"title":"Sentence structures","permalink":"/2025/09/04/sentence-structures"}}')}}]);