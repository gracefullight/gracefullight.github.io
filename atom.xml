<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gracefullight.dev/</id>
    <title>gracefullight.dev Blog</title>
    <updated>2025-01-28T01:34:39.958Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gracefullight.dev/"/>
    <subtitle>gracefullight.dev Blog</subtitle>
    <icon>https://gracefullight.dev/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[멀티 GPU]]></title>
        <id>https://gracefullight.dev/pe/ca/multi-gpu/</id>
        <link href="https://gracefullight.dev/pe/ca/multi-gpu/"/>
        <updated>2025-01-28T01:34:39.958Z</updated>
        <summary type="html"><![CDATA[Multi GPU]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_OSIK" id="멀티-gpu-개요">멀티 GPU 개요<a href="https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%EA%B0%9C%EC%9A%94" class="hash-link" aria-label="멀티 GPU 개요에 대한 직접 링크" title="멀티 GPU 개요에 대한 직접 링크">​</a></h2>
<p><img decoding="async" loading="lazy" alt="multi gpu trends" src="https://gracefullight.dev/assets/images/multi-gpu-trends-490e3d4995df05fbb4f0bf2b1098164f.jpg" width="1646" height="700" class="img_xC7_"></p>
<ul>
<li>딥러닝에서 대규모 신경망을 효율적으로 학습하기 위해 GPU 활용, 다수 GPU를 연결하기 위한 인터커넥트 기술 발전으로 멀티 GPU 필요성 증가</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="멀티-gpu-구성도-핵심요소-장점">멀티 GPU 구성도, 핵심요소, 장점<a href="https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%EA%B5%AC%EC%84%B1%EB%8F%84-%ED%95%B5%EC%8B%AC%EC%9A%94%EC%86%8C-%EC%9E%A5%EC%A0%90" class="hash-link" aria-label="멀티 GPU 구성도, 핵심요소, 장점에 대한 직접 링크" title="멀티 GPU 구성도, 핵심요소, 장점에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="멀티-gpu-구성도">멀티 GPU 구성도<a href="https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%EA%B5%AC%EC%84%B1%EB%8F%84" class="hash-link" aria-label="멀티 GPU 구성도에 대한 직접 링크" title="멀티 GPU 구성도에 대한 직접 링크">​</a></h3>
<p><img decoding="async" loading="lazy" alt="multi gpu" src="https://gracefullight.dev/assets/images/multi-gpu-dc7fe8ab691b08f33e4d89f5b0270cb5.jpg" width="2866" height="790" class="img_xC7_"></p>
<ul>
<li>여러 개의 GPU를 동시에 사용하여 대규모 신경망 학습 및 추론 훈련</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="멀티-gpu-핵심요소">멀티 GPU 핵심요소<a href="https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%ED%95%B5%EC%8B%AC%EC%9A%94%EC%86%8C" class="hash-link" aria-label="멀티 GPU 핵심요소에 대한 직접 링크" title="멀티 GPU 핵심요소에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>역할</th><th>설명</th></tr></thead><tbody><tr><td>SM (Streaming Multiprocessor)</td><td>연산 처리 유닛</td><td>GPU 내부에서 병렬 연산을 수행하는 핵심 유닛으로, 작업을 처리하고 메모리 관리 유닛으로 데이터를 전달</td></tr><tr><td>MMU (Memory Management Unit)</td><td>메모리 관리</td><td>GPU의 메모리 액세스를 관리하고 가상 메모리 주소를 물리 메모리 주소로 변환</td></tr><tr><td>NVLink NIC</td><td>데이터 전송 인터페이스</td><td>NVLink를 통해 GPU 간의 고속 데이터 전송을 담당</td></tr><tr><td>NVLink Network Switch</td><td>데이터 전송 경로 관리</td><td>여러 GPU 간 데이터 흐름을 관리하고, 최적의 전송 경로를 설정</td></tr><tr><td>TLB (Translation Lookaside Buffer)</td><td>주소 변환 캐싱</td><td>MMU에서 자주 사용하는 주소 변환 결과를 캐싱하여 속도 향상</td></tr><tr><td>HBM (High Bandwidth Memory)</td><td>고속 메모리</td><td>고속 메모리로 데이터 저장 및 접근을 지원, GPU 연산 속도 최적화</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="멀티-gpu-장점">멀티 GPU 장점<a href="https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%EC%9E%A5%EC%A0%90" class="hash-link" aria-label="멀티 GPU 장점에 대한 직접 링크" title="멀티 GPU 장점에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>장점</th><th>설명</th></tr></thead><tbody><tr><td>성능향상</td><td>실시간 처리</td><td>멀티 GPU를 통해 연산 작업을 병렬로 처리하여 실시간 성능을 향상시킴</td></tr><tr><td></td><td>대규모 처리</td><td>대규모 데이터 세트나 복잡한 모델을 빠르게 학습 및 추론 가능</td></tr><tr><td>자원최적화</td><td>메모리 용량</td><td>각 GPU의 메모리를 활용하여 단일 GPU의 메모리 제한을 극복</td></tr><tr><td></td><td>모델 병렬화</td><td>모델을 여러 GPU로 분산하여 병렬 연산을 최적화</td></tr><tr><td>확장성</td><td>GPU 확장</td><td>추가 GPU를 연결하여 시스템의 연산 성능을 손쉽게 확장 가능</td></tr><tr><td></td><td>데이터 추가</td><td>대규모 데이터 처리 시 여러 GPU를 활용하여 병렬 데이터 전처리 및 학습 가능</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="멀티-gpu-학습-환경-구축시-고려사항">멀티 GPU 학습 환경 구축시 고려사항<a href="https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%ED%95%99%EC%8A%B5-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%EC%8B%9C-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD" class="hash-link" aria-label="멀티 GPU 학습 환경 구축시 고려사항에 대한 직접 링크" title="멀티 GPU 학습 환경 구축시 고려사항에 대한 직접 링크">​</a></h2>
<table><thead><tr><th>구분</th><th>고려사항</th><th>비고</th></tr></thead><tbody><tr><td>물리적 인프라</td><td>HW구성</td><td>GPU 선택, 서버, CPU, 파워, 냉각시스템</td></tr><tr><td></td><td>NW구성</td><td>내부연결, 서버 간 ㅇ녀결, 로드밸런싱, 스토리지 네트워크</td></tr><tr><td>논리적 시스템</td><td>SW환경</td><td>OS, 프레임워크, 분산훈련, 모니터링 도구</td></tr><tr><td></td><td>성능최적화</td><td>GPU 메모리 관리, 연산정밀도, 배치 크기, 하이퍼파라미터 튜닝</td></tr><tr><td></td><td>병렬처리 환경</td><td>데이터 병렬화, 파이프라인 병렬화, 모델 병렬화</td></tr></tbody></table>
<ul>
<li>TIA-942 데이터센터 구축을 위한 표준 요구사항을 참조하여 비용효율성과 가용성 제고</li>
</ul>]]></content>
        <author>
            <name>Eunkwang Shin</name>
            <uri>https://github.com/gracefullight</uri>
        </author>
        <category label="professional-engineer" term="professional-engineer"/>
        <category label="pe/computer-architecture" term="pe/computer-architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[스토리지 가상화]]></title>
        <id>https://gracefullight.dev/pe/ca/storage-virtualization/</id>
        <link href="https://gracefullight.dev/pe/ca/storage-virtualization/"/>
        <updated>2025-01-28T01:24:51.260Z</updated>
        <summary type="html"><![CDATA[Storage Virtualization]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_OSIK" id="스토리지-가상화-개념">스토리지 가상화 개념<a href="https://gracefullight.dev/pe/ca/storage-virtualization/#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EA%B0%80%EC%83%81%ED%99%94-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="스토리지 가상화 개념에 대한 직접 링크" title="스토리지 가상화 개념에 대한 직접 링크">​</a></h2>
<ul>
<li>물리적으로 분리된 다수 스토리지를 논리적으로 통합하여 스토리지 자원의 가용성과 편리성을 향상시키는 기술</li>
<li>기존스토리지 낮은 활용도(48%) 극복, 벤더 종속적인 이기종 스토리지 호환성 문제, 유지보수 비용 절감</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="스토리지-가상화-유형">스토리지 가상화 유형<a href="https://gracefullight.dev/pe/ca/storage-virtualization/#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EA%B0%80%EC%83%81%ED%99%94-%EC%9C%A0%ED%98%95" class="hash-link" aria-label="스토리지 가상화 유형에 대한 직접 링크" title="스토리지 가상화 유형에 대한 직접 링크">​</a></h2>
<table><thead><tr><th>구분</th><th>블록스토리지 가상화</th><th>파일스토리지 가상화</th><th>오브젝트스토리지 가상화</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding="async" loading="lazy" alt="block-storage" src="https://gracefullight.dev/assets/images/block-storage-virtualization-5f6baa6587cd0539cd5881f067b688cf.jpg" width="802" height="332" class="img_xC7_"></td><td><img decoding="async" loading="lazy" alt="file-storage" src="https://gracefullight.dev/assets/images/file-storage-virtualization-6ca0ddee7bf23d7260cc0fcc85e637ff.jpg" width="838" height="322" class="img_xC7_"></td><td><img decoding="async" loading="lazy" alt="object-storage" src="https://gracefullight.dev/assets/images/object-storage-virtualization-fd4ffd3af367317e3697578893fb7a02.jpg" width="952" height="320" class="img_xC7_"></td></tr><tr><td>개념</td><td>물리적 스토리지를 블록 단위로 추상화하여 논리적 블록으로 제공</td><td>물리적 스토리지를 파일단위로 추상화하여 파일명, 경로 통해 공유</td><td>데이터를 개체 단위로 관리하여 데이터와 메타데이터를 함께 저장하고 논리적 통합하여 제공</td></tr><tr><td>주요환경</td><td>SAN</td><td>NAS/SAN</td><td>클라우드 스토리지, 대규모 비정형데이터 저장소</td></tr><tr><td>접근방식</td><td>OS가 논리적 블록주소 통해 접근</td><td>파일명, 경로</td><td>RESTful API, HTTP, HTTPS</td></tr><tr><td>프로토콜</td><td>iSCSI, FC</td><td>NFC, SMB, CIFS</td><td>S3API, HTTP, HTTPS</td></tr><tr><td>주요사례</td><td>DB, 고성능 어플리케이션, 가상머신디스크</td><td>파일공유, NW기반 데이터 접근</td><td>클라우드스토리지, 데이터분석, 비정형데이터 저장</td></tr><tr><td>특징</td><td>낮은 오버헤드, 빠른 데이터 전송, OS 무관</td><td>액세스제어 용이, 속성정보 관리 편이</td><td>오브젝트별 고유 ID, OS/FS 의존성 없음, 무한 확장성</td></tr><tr><td>대표기술</td><td>SANique, IBM SVC, 스토리지 어레이</td><td>NFS, GPFS, SNFS, GFS</td><td>S3, Cloud Storage, Blob Storage</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="스토리지-가상화-구축시-고려사항">스토리지 가상화 구축시 고려사항<a href="https://gracefullight.dev/pe/ca/storage-virtualization/#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EA%B0%80%EC%83%81%ED%99%94-%EA%B5%AC%EC%B6%95%EC%8B%9C-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD" class="hash-link" aria-label="스토리지 가상화 구축시 고려사항에 대한 직접 링크" title="스토리지 가상화 구축시 고려사항에 대한 직접 링크">​</a></h2>
<table><thead><tr><th>항목</th><th>고려사항</th><th>설명</th></tr></thead><tbody><tr><td>호환성</td><td>지원 프로토콜 및 솔루션</td><td>DBMS, HA 솔루션, 백업 장치 지원 가능<br>FC 프로토콜, iSCSI 프로토콜, CIFS &amp; NFS 지원</td></tr><tr><td>가용성/안정성</td><td>장애 대응 및 데이터 보호</td><td>Failover 기능 지원 및 데이터 유실 방지<br>바이러스 및 기타 공격 차단</td></tr><tr><td>기능성</td><td>서비스 연속성 및 확장성</td><td>무중단 서비스 및 스토리지 추가/제거<br>디스크 볼륨 할당 및 확장 작업 가능</td></tr><tr><td>구축용이성</td><td>시스템 다운타임 최소화</td><td>기존 시스템과의 호환성 고려<br>다운타임 최소화 방안 제시</td></tr></tbody></table>]]></content>
        <author>
            <name>Eunkwang Shin</name>
            <uri>https://github.com/gracefullight</uri>
        </author>
        <category label="professional-engineer" term="professional-engineer"/>
        <category label="pe/computer-architecture" term="pe/computer-architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[TIA-942]]></title>
        <id>https://gracefullight.dev/pe/ca/tia-942/</id>
        <link href="https://gracefullight.dev/pe/ca/tia-942/"/>
        <updated>2025-01-28T01:08:36.602Z</updated>
        <summary type="html"><![CDATA[TIA-942]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_OSIK" id="tia-942-개념">TIA-942 개념<a href="https://gracefullight.dev/pe/ca/tia-942/#tia-942-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="TIA-942 개념에 대한 직접 링크" title="TIA-942 개념에 대한 직접 링크">​</a></h2>
<ul>
<li>미 통신산업협회가 제정한 데이터센터 설계 및 운영에 필요한 최소 요건을 규정한 데이터 센터 인프라의 Defacto 표준</li>
<li>데이터센터 안정성, 신뢰성, 확장성, 보안지침 제공, 데이터센터 품질 평가기준</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="tia-942-구성도-품질등급">TIA-942 구성도, 품질등급<a href="https://gracefullight.dev/pe/ca/tia-942/#tia-942-%EA%B5%AC%EC%84%B1%EB%8F%84-%ED%92%88%EC%A7%88%EB%93%B1%EA%B8%89" class="hash-link" aria-label="TIA-942 구성도, 품질등급에 대한 직접 링크" title="TIA-942 구성도, 품질등급에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="tia-942-구성도">TIA-942 구성도<a href="https://gracefullight.dev/pe/ca/tia-942/#tia-942-%EA%B5%AC%EC%84%B1%EB%8F%84" class="hash-link" aria-label="TIA-942 구성도에 대한 직접 링크" title="TIA-942 구성도에 대한 직접 링크">​</a></h3>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="tia-942-품질등급-개념도">TIA-942 품질등급 개념도<a href="https://gracefullight.dev/pe/ca/tia-942/#tia-942-%ED%92%88%EC%A7%88%EB%93%B1%EA%B8%89-%EA%B0%9C%EB%85%90%EB%8F%84" class="hash-link" aria-label="TIA-942 품질등급 개념도에 대한 직접 링크" title="TIA-942 품질등급 개념도에 대한 직접 링크">​</a></h3>
<p><img decoding="async" loading="lazy" alt="tia-942" src="https://gracefullight.dev/assets/images/tia-942-06f4e5bd7969b8b60766e56180ae4c00.jpg" width="1278" height="620" class="img_xC7_"></p>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="tia-942-품질등급-상세설명">TIA-942 품질등급 상세설명<a href="https://gracefullight.dev/pe/ca/tia-942/#tia-942-%ED%92%88%EC%A7%88%EB%93%B1%EA%B8%89-%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85" class="hash-link" aria-label="TIA-942 품질등급 상세설명에 대한 직접 링크" title="TIA-942 품질등급 상세설명에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>Tier1</th><th>Tier2</th><th>Tier3</th><th>Tier4</th></tr></thead><tbody><tr><td>장애영향</td><td>비/계획된 액티비티에 대한 사이트 영향 높음</td><td>비/계획된 액티비티에 대한 사이트 영향 보통</td><td>계획된 액티비티에 대한 컴퓨팅 HW 운영지장 없음</td><td>계획된 액티비티에 대한 임계부하 없음</td></tr><tr><td></td><td></td><td></td><td>비계획 작업은 영향</td><td>비계획 액티비티 임계부하 적어도 1번 방어</td></tr><tr><td>전력/냉방시설 이중화</td><td>필요</td><td>N+1</td><td>N+1, 동시 활성화</td><td>2(N+1), 무정지상태</td></tr><tr><td>백본/라우터 이중화</td><td>없음</td><td>없음</td><td>필요</td><td>필요</td></tr><tr><td>적용기간</td><td>3개월</td><td>~6개월</td><td>15~20개월</td><td>15~20개월</td></tr><tr><td>MTTR</td><td>28.8h</td><td>22.0h</td><td>1.6h</td><td>0.4h</td></tr><tr><td>보안시설</td><td>일반 잠금장치</td><td>카드인식</td><td>생체인식</td><td>생체인식</td></tr></tbody></table>]]></content>
        <author>
            <name>Eunkwang Shin</name>
            <uri>https://github.com/gracefullight</uri>
        </author>
        <category label="professional-engineer" term="professional-engineer"/>
        <category label="pe/computer-architecture" term="pe/computer-architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PIM, Processing In Memory]]></title>
        <id>https://gracefullight.dev/pe/ca/pim/</id>
        <link href="https://gracefullight.dev/pe/ca/pim/"/>
        <updated>2025-01-28T00:46:42.874Z</updated>
        <summary type="html"><![CDATA[Processing In Memory]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_OSIK" id="pim-개념">PIM 개념<a href="https://gracefullight.dev/pe/ca/pim/#pim-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="PIM 개념에 대한 직접 링크" title="PIM 개념에 대한 직접 링크">​</a></h2>
<ul>
<li>메모리 내부 연산 기능을 추가하여, 데이터 이동 없이 메모리 자체 연산 수행으로 성능 개선 및 에너지 효율을 높이는 메모리 반도체</li>
<li>폰 논이만 구조 한계 극복, 추론 AI 패러다임, 데이ㅓ 병목 최소화, 저전력 설계</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="pim-개념도-pnm과의-비교-적용방안">PIM 개념도, PNM과의 비교, 적용방안<a href="https://gracefullight.dev/pe/ca/pim/#pim-%EA%B0%9C%EB%85%90%EB%8F%84-pnm%EA%B3%BC%EC%9D%98-%EB%B9%84%EA%B5%90-%EC%A0%81%EC%9A%A9%EB%B0%A9%EC%95%88" class="hash-link" aria-label="PIM 개념도, PNM과의 비교, 적용방안에 대한 직접 링크" title="PIM 개념도, PNM과의 비교, 적용방안에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="pim-개념도">PIM 개념도<a href="https://gracefullight.dev/pe/ca/pim/#pim-%EA%B0%9C%EB%85%90%EB%8F%84" class="hash-link" aria-label="PIM 개념도에 대한 직접 링크" title="PIM 개념도에 대한 직접 링크">​</a></h3>
<p><img decoding="async" loading="lazy" alt="pim" src="https://gracefullight.dev/assets/images/pim-cdbd67f2a21eb186a72aac5e839f3967.jpg" width="2262" height="648" class="img_xC7_"></p>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="pim-pnm-비교">PIM, PNM 비교<a href="https://gracefullight.dev/pe/ca/pim/#pim-pnm-%EB%B9%84%EA%B5%90" class="hash-link" aria-label="PIM, PNM 비교에 대한 직접 링크" title="PIM, PNM 비교에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>PIM</th><th>PNM</th></tr></thead><tbody><tr><td>연산기 위치</td><td>DRAM 칩 내부</td><td>DRAM 근처 별도 칩</td></tr><tr><td>전송지연</td><td>없음</td><td>일부 있음</td></tr><tr><td>장점</td><td>데이터 이동 제거</td><td>범용성 확보</td></tr><tr><td></td><td>병렬처리 극대화</td><td>전력효율성</td></tr><tr><td>단점</td><td>범용성 낮음</td><td>상대적 낮은 성능</td></tr><tr><td>분야</td><td>추론 AI 등</td><td>고성능컴퓨팅, 데이터센터</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="pim-적용바안">PIM 적용바안<a href="https://gracefullight.dev/pe/ca/pim/#pim-%EC%A0%81%EC%9A%A9%EB%B0%94%EC%95%88" class="hash-link" aria-label="PIM 적용바안에 대한 직접 링크" title="PIM 적용바안에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>내용</th><th>비고</th></tr></thead><tbody><tr><td>AI 가속기</td><td>AI 작업의 대규모 병렬 처리시 활용</td><td>음성인식, 이미지 처리</td></tr><tr><td>빅데이터 분석</td><td>대량 데이터 실시간 처리 최적화</td><td>SEM, EPM 등</td></tr><tr><td>고성능 컴퓨팅</td><td>GPU와 협업하여 워크로드 분산</td><td>MAC 연산 수행</td></tr></tbody></table>]]></content>
        <author>
            <name>Eunkwang Shin</name>
            <uri>https://github.com/gracefullight</uri>
        </author>
        <category label="professional-engineer" term="professional-engineer"/>
        <category label="pe/computer-architecture" term="pe/computer-architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[칩렛]]></title>
        <id>https://gracefullight.dev/pe/ca/chiplet/</id>
        <link href="https://gracefullight.dev/pe/ca/chiplet/"/>
        <updated>2025-01-28T00:19:18.460Z</updated>
        <summary type="html"><![CDATA[Chiplet]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_OSIK" id="칩렛-개념">칩렛 개념<a href="https://gracefullight.dev/pe/ca/chiplet/#%EC%B9%A9%EB%A0%9B-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="칩렛 개념에 대한 직접 링크" title="칩렛 개념에 대한 직접 링크">​</a></h2>
<ul>
<li>여러 개의 작은 칩(다이)을 모듈화하여 하나의 패키지 안에서 상호연결하는 기술</li>
<li>무어의 법칙 한계, 단일 SoC를 나누고 조합하여 유연한 아키텍처 제공, 설계/생산비용 절감</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="칩렛-개념도-구현-방법-장점">칩렛 개념도, 구현 방법, 장점<a href="https://gracefullight.dev/pe/ca/chiplet/#%EC%B9%A9%EB%A0%9B-%EA%B0%9C%EB%85%90%EB%8F%84-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95-%EC%9E%A5%EC%A0%90" class="hash-link" aria-label="칩렛 개념도, 구현 방법, 장점에 대한 직접 링크" title="칩렛 개념도, 구현 방법, 장점에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="칩렛-개념도">칩렛 개념도<a href="https://gracefullight.dev/pe/ca/chiplet/#%EC%B9%A9%EB%A0%9B-%EA%B0%9C%EB%85%90%EB%8F%84" class="hash-link" aria-label="칩렛 개념도에 대한 직접 링크" title="칩렛 개념도에 대한 직접 링크">​</a></h3>
<p><img decoding="async" loading="lazy" alt="chiplet" src="https://gracefullight.dev/assets/images/chiplet-a826476a0852a685f6afac429cc48485.jpg" width="2722" height="798" class="img_xC7_"></p>
<ul>
<li>다이 슬롯 모듈화로 다양항 기능을 가진 이기종 칩을 결합하여 사용 가능</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="칩렛-구현-방법">칩렛 구현 방법<a href="https://gracefullight.dev/pe/ca/chiplet/#%EC%B9%A9%EB%A0%9B-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95" class="hash-link" aria-label="칩렛 구현 방법에 대한 직접 링크" title="칩렛 구현 방법에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>와이어본딩</th><th>플립칩 본딩</th><th>TSV</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding="async" loading="lazy" alt="wire-bonding" src="https://gracefullight.dev/assets/images/wire-bonding-63918e5feb718aac0666a4d6c822bfe7.jpg" width="634" height="294" class="img_xC7_"></td><td><img decoding="async" loading="lazy" alt="filp-chip-bonding" src="https://gracefullight.dev/assets/images/flip-chip-bonding-97ca8c0ddee6d434640d79eafa6de79a.jpg" width="620" height="314" class="img_xC7_"></td><td><img decoding="async" loading="lazy" alt="through silicon via" src="https://gracefullight.dev/assets/images/tsv-df25fdbe21e266d7b2180fd73833905b.jpg" width="646" height="282" class="img_xC7_"></td></tr><tr><td>개념</td><td>칩과 기판 또는 칩 간 연결을 금속 와이어를 통해 구현하는 전통적인 본딩 방식</td><td>칩과 기판을 플립(뒤집어) 배치한 후, 범프(땜납)로 연결하는 본딩 방식</td><td>실리콘 웨이퍼에 수직으로 뚫린 구멍(비아)를 통해 칩 내부 및 칩 간 전기 신호를 연결하는 3D 본딩 방식</td></tr><tr><td>특징</td><td>전기적 신호 전달거리 짧음</td><td>작은 전기저항, 빠른 속도</td><td>칩 간 인터커넥션 길이 감소, 빠른 신호전달</td></tr><tr><td></td><td>전기적 특성 우수</td><td>작은 폼팩터 구현 가능</td><td>고용량, 저전력</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="칩렛-장점">칩렛 장점<a href="https://gracefullight.dev/pe/ca/chiplet/#%EC%B9%A9%EB%A0%9B-%EC%9E%A5%EC%A0%90" class="hash-link" aria-label="칩렛 장점에 대한 직접 링크" title="칩렛 장점에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>측면</th><th>장점</th></tr></thead><tbody><tr><td>기술적</td><td>품질측면</td><td>칩 분할 생산 통한 수율향상</td></tr><tr><td></td><td>제조측면</td><td>바른 설계와 제작 가능</td></tr><tr><td></td><td>결합측면</td><td>상이한 이종칩 결합 가능</td></tr><tr><td>산업적</td><td>비용측면</td><td>제작 및 설계 비용 감소</td></tr><tr><td></td><td>개발측면</td><td>핵심 기술 개발 효율</td></tr><tr><td></td><td>시장측면</td><td>웨이퍼 칩 설계, 제작 진입장벽 낮춤</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="soc-sip-chiplet-비교">SoC, SiP, Chiplet 비교<a href="https://gracefullight.dev/pe/ca/chiplet/#soc-sip-chiplet-%EB%B9%84%EA%B5%90" class="hash-link" aria-label="SoC, SiP, Chiplet 비교에 대한 직접 링크" title="SoC, SiP, Chiplet 비교에 대한 직접 링크">​</a></h2>
<table><thead><tr><th>구분</th><th>SoC</th><th>SiP</th><th>Chiplet</th></tr></thead><tbody><tr><td>구조</td><td>단일 칩 내 모든 기능 통합</td><td>여러 다이를 하나의 패키지로 통합</td><td>개별/기능별 모듈형 칩 통합</td></tr><tr><td>유연성</td><td>낮음</td><td>중간</td><td>높음</td></tr><tr><td>성능최적화</td><td>제한적</td><td>제한적</td><td>각 기능별 최적화 가능</td></tr><tr><td>비용효율성</td><td>낮음</td><td>중간</td><td>높음</td></tr><tr><td>개발기간</td><td>김</td><td>중간</td><td>짧음</td></tr></tbody></table>]]></content>
        <author>
            <name>Eunkwang Shin</name>
            <uri>https://github.com/gracefullight</uri>
        </author>
        <category label="professional-engineer" term="professional-engineer"/>
        <category label="pe/computer-architecture" term="pe/computer-architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[캐시]]></title>
        <id>https://gracefullight.dev/pe/ca/cache/</id>
        <link href="https://gracefullight.dev/pe/ca/cache/"/>
        <updated>2025-01-27T13:13:52.870Z</updated>
        <summary type="html"><![CDATA[Cache]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_OSIK" id="캐시-개념">캐시 개념<a href="https://gracefullight.dev/pe/ca/cache/#%EC%BA%90%EC%8B%9C-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="캐시 개념에 대한 직접 링크" title="캐시 개념에 대한 직접 링크">​</a></h2>
<!-- -->
<ul>
<li>CPU와 주기억장치 간의 속도차를 완화시켜 프로세서 대기시간을 최소화를 위한 고속 메모리</li>
<li>캐시 용량이 메인 메모리보다 작아 일부분만 적재되므로 최고의 적중률을 내기 위해 매핑 기법 필요</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="캐시메모리-매핑-방식">캐시메모리 매핑 방식<a href="https://gracefullight.dev/pe/ca/cache/#%EC%BA%90%EC%8B%9C%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%A7%A4%ED%95%91-%EB%B0%A9%EC%8B%9D" class="hash-link" aria-label="캐시메모리 매핑 방식에 대한 직접 링크" title="캐시메모리 매핑 방식에 대한 직접 링크">​</a></h2>
<table><thead><tr><th>구분</th><th>직접 사상</th><th>연관 사상</th><th>집합 연관 사상</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding="async" loading="lazy" alt="direct" src="https://gracefullight.dev/assets/images/direct-mapping-7f5a88ad42347a48f42b02fca85320cd.png" width="1096" height="842" class="img_xC7_"></td><td><img decoding="async" loading="lazy" alt="associative" src="https://gracefullight.dev/assets/images/associative-mapping-e4cc7d722108d948813d0803e801c9fd.png" width="1158" height="862" class="img_xC7_"></td><td><img decoding="async" loading="lazy" alt="set-associative" src="https://gracefullight.dev/assets/images/set-associative-mapping-5eab21235ddef4acccd1c5881c83097c.png" width="1150" height="800" class="img_xC7_"></td></tr><tr><td>개념</td><td>메모리 블록이 캐시의 특정 라인으로만 로딩 가능</td><td>메모리 블록이 임의의 라인으로 로딩 가능</td><td>메모리 블록이 특정 집합의 모든 라인에 로딩 가능</td></tr><tr><td>장점</td><td>회로 구현 간단, 처리 속도 향상</td><td>캐시 적중률 향상</td><td>캐시:메모리 = N:1로 효율적</td></tr><tr><td>단점</td><td>캐시 실패율 높음</td><td>회로 복잡, 처리 속도 느림</td><td>회로 복잡</td></tr><tr><td>구조</td><td>지정된 특정 라인으로 로딩 가능</td><td>임의의 라인으로 로딩 가능</td><td>특정 집합의 모든 라인에 로딩 가능</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="캐시-쓰기-정책">캐시 쓰기 정책<a href="https://gracefullight.dev/pe/ca/cache/#%EC%BA%90%EC%8B%9C-%EC%93%B0%EA%B8%B0-%EC%A0%95%EC%B1%85" class="hash-link" aria-label="캐시 쓰기 정책에 대한 직접 링크" title="캐시 쓰기 정책에 대한 직접 링크">​</a></h2>
<table><thead><tr><th>구분</th><th>Write-Through</th><th>Write-Back</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding="async" loading="lazy" alt="write-through" src="https://gracefullight.dev/assets/images/write-through-d10b6e19cb0bd4363958f26e1ffe7661.png" width="600" height="314" class="img_xC7_"></td><td><img decoding="async" loading="lazy" alt="write-back" src="https://gracefullight.dev/assets/images/write-back-c3d8158a711c16a30d9d3ab49c5f947a.png" width="602" height="302" class="img_xC7_"></td></tr><tr><td>개념</td><td>모든 쓰기 동작들이 캐시와 주기억장치에 동시에 수행되는 방식</td><td>캐시에서 데이터 변경 후 주기억장치에는 나중에 블록을 복사하여 갱신하는 방식</td></tr><tr><td>특징</td><td>단순, 일관성 보장</td><td>쓰기동작 최소화, 짧은 쓰기 시간</td></tr><tr><td></td><td>긴 쓰기 시간, 많은 트래픽</td><td>일관성 유지 어려움, 블록 교체시 상태 확인 필요</td></tr><tr><td>일관성 문제</td><td><img decoding="async" loading="lazy" alt="write-through" src="https://gracefullight.dev/assets/images/write-through-issue-6e112735e46403c6afc8f475ca51c7f5.png" width="1228" height="396" class="img_xC7_"></td><td><img decoding="async" loading="lazy" alt="write-back" src="https://gracefullight.dev/assets/images/write-back-issue-f818fc8d3b1d8471e43e805276f1ee43.png" width="1426" height="388" class="img_xC7_"></td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="캐시-일관성-유지-기법">캐시 일관성 유지 기법<a href="https://gracefullight.dev/pe/ca/cache/#%EC%BA%90%EC%8B%9C-%EC%9D%BC%EA%B4%80%EC%84%B1-%EC%9C%A0%EC%A7%80-%EA%B8%B0%EB%B2%95" class="hash-link" aria-label="캐시 일관성 유지 기법에 대한 직접 링크" title="캐시 일관성 유지 기법에 대한 직접 링크">​</a></h2>
<table><thead><tr><th>구분</th><th>기법</th><th>설명</th></tr></thead><tbody><tr><td>SW 기법</td><td>공유 캐시 사용</td><td>모든 프로세서가 하나의 공유 캐시를 사용</td></tr><tr><td></td><td></td><td>항상 캐시 일관성이 유지</td></tr><tr><td></td><td></td><td>프로세서 간 캐시 액세스 충돌로 성능 저하 초래</td></tr><tr><td></td><td>공유 변수 캐시 미사용</td><td>공유변수를 캐시에 저장하지 않는 기법</td></tr><tr><td></td><td></td><td>캐시 저장 불가능 데이터: Lock 변수, 프로세스 큐와 같은 공유 데이터 구조, 입출력 영역에 의해 보호되는 데이터</td></tr><tr><td></td><td></td><td>캐시 적중률 저하 및 I/O 성능 저하 초래</td></tr><tr><td>HW 기법</td><td>디렉토리 프로토콜</td><td>캐시의 정보 상태(캐시 블록 공유상태, 노드 등)을 주기억장치 디렉토리에 저장하여 일관성을 보장하는 방법</td></tr><tr><td></td><td></td><td>Full Map 디렉토리: 디렉토리에 모든 캐시의 포인터와 데이터 저장</td></tr><tr><td></td><td></td><td>Limited 디렉토리: Full Map 디렉토리의 기억장소 부담 감소</td></tr><tr><td></td><td></td><td>Chained 디렉토리: 캐시 포인터를 linked list로 연결, 기억장소 부담 감소</td></tr><tr><td></td><td></td><td>Passive한 방법이며 다중서버 복잡한 시스템에 적합</td></tr><tr><td></td><td>스누피 프로토콜</td><td>멀티 프로세서 내의 모든 캐시 제어기에 캐시 일관성 유지를 위한 정보를 브로드캐스트하는 기법</td></tr><tr><td></td><td></td><td>스누피 제어기: 다른 프로세서에 의한 메모리 액세스 감지 후 상태 조절</td></tr><tr><td></td><td></td><td>쓰기 갱신(Write Update): Write 발생 시 모든 캐시에 갱신된 정보 전송</td></tr><tr><td></td><td></td><td>쓰기 무효(Write Invalidate): Write 발생 시 Invalid 메시지로 브로드캐스팅</td></tr><tr><td></td><td></td><td>MESI 프로토콜: Modified(수정), Exclusive(배타), Shared(2개 이상의 캐시에 공유), Invalid(무효, 다른 캐시가 수정) 4가지 상태로 데이터 유효성 여부 판단</td></tr><tr><td></td><td></td><td>Active한 방법, 소규모 시스템, 높은 버스 대역폭</td></tr><tr><td>프로토콜</td><td>기타 프로토콜</td><td>MEI, MSI, MOESI, MESIF 프로토콜</td></tr><tr><td></td><td></td><td>O(Owned): 변경 상태의 캐시 블록을 다른 곳에서 읽은 경우</td></tr><tr><td></td><td></td><td>F(Forwarding): 여러 프로세서가 공유한 캐시 블록 접근 시</td></tr></tbody></table>]]></content>
        <author>
            <name>Eunkwang Shin</name>
            <uri>https://github.com/gracefullight</uri>
        </author>
        <category label="professional-engineer" term="professional-engineer"/>
        <category label="pe/computer-architecture" term="pe/computer-architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[제어장치, 마이크로프로그램, 하드와이어]]></title>
        <id>https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/</id>
        <link href="https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/"/>
        <updated>2025-01-27T12:34:26.441Z</updated>
        <summary type="html"><![CDATA[The differences between Micro-programmed and Hard-wired Control Units]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_OSIK" id="제어장치-개념">제어장치 개념<a href="https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#%EC%A0%9C%EC%96%B4%EC%9E%A5%EC%B9%98-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="제어장치 개념에 대한 직접 링크" title="제어장치 개념에 대한 직접 링크">​</a></h2>
<!-- -->
<ul>
<li>프로그램 명령어를 해석하고, 레지스터에 명령실행 제어 신호를 발생시키는 CPU 구성요소</li>
<li>명령어 해독, 제어신호 생성, 제어신호 인가 기능 수행</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="micro-programmed-구현방법-개념-및-구성요소">Micro-programmed 구현방법 개념 및 구성요소<a href="https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#micro-programmed-%EA%B5%AC%ED%98%84%EB%B0%A9%EB%B2%95-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C" class="hash-link" aria-label="Micro-programmed 구현방법 개념 및 구성요소에 대한 직접 링크" title="Micro-programmed 구현방법 개념 및 구성요소에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="micro-programmed-개념">Micro-programmed 개념<a href="https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#micro-programmed-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="Micro-programmed 개념에 대한 직접 링크" title="Micro-programmed 개념에 대한 직접 링크">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Micro-programmed" src="https://gracefullight.dev/assets/images/micro-programmed-b474904168c13307f5674b9c48fa97e6.jpg" width="1316" height="700" class="img_xC7_"></p>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="micro-programmed-구성요소">Micro-programmed 구성요소<a href="https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#micro-programmed-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C" class="hash-link" aria-label="Micro-programmed 구성요소에 대한 직접 링크" title="Micro-programmed 구성요소에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구성요소</th><th>역할</th><th>설명</th></tr></thead><tbody><tr><td>IR (Instruction Register)</td><td>명령어 저장</td><td>현재 실행 중인 명령어를 저장하고 제어 메모리 주소를 생성하는 데 사용</td></tr><tr><td>Address Generator</td><td>마이크로 명령 주소 생성</td><td>현재 명령어와 상태를 기반으로 제어 메모리의 다음 주소를 생성</td></tr><tr><td>CAR (Control Address Register)</td><td>제어 메모리 주소 저장</td><td>제어 메모리에서 접근할 주소를 저장</td></tr><tr><td>Control Memory (ROM)</td><td>마이크로코드 저장</td><td>제어 신호 생성을 위한 마이크로 명령어들을 저장</td></tr><tr><td>CDR (Control Data Register)</td><td>제어 데이터 저장</td><td>제어 메모리에서 읽어온 마이크로 명령어를 저장</td></tr><tr><td>Control Signals</td><td>제어 신호</td><td>마이크로 명령어에 따라 생성된 최종 제어 신호</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="hard-wired-구현방법-개념-및-구성요소">Hard-wired 구현방법 개념 및 구성요소<a href="https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#hard-wired-%EA%B5%AC%ED%98%84%EB%B0%A9%EB%B2%95-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C" class="hash-link" aria-label="Hard-wired 구현방법 개념 및 구성요소에 대한 직접 링크" title="Hard-wired 구현방법 개념 및 구성요소에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="hard-wired-개념">Hard-wired 개념<a href="https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#hard-wired-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="Hard-wired 개념에 대한 직접 링크" title="Hard-wired 개념에 대한 직접 링크">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Hard-wired" src="https://gracefullight.dev/assets/images/hard-wired-f76becd9ef64da999798cc3948b963e8.jpg" width="1328" height="710" class="img_xC7_"></p>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="hard-wired-구성요소">Hard-wired 구성요소<a href="https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#hard-wired-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C" class="hash-link" aria-label="Hard-wired 구성요소에 대한 직접 링크" title="Hard-wired 구성요소에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구성요소</th><th>역할</th><th>설명</th></tr></thead><tbody><tr><td>IR (Instruction Register)</td><td>명령어 저장</td><td>현재 실행 중인 명령어를 저장하고 디코더에 전달</td></tr><tr><td>Instruction Decoder</td><td>명령어 해독</td><td>IR에서 전달받은 명령어를 해독하여 제어 신호 생성을 준비</td></tr><tr><td>Control Step Counter</td><td>클록 기반 스텝 제어</td><td>클록 신호를 기반으로 명령 실행 단계를 순차적으로 관리</td></tr><tr><td>Control Signal Generator</td><td>제어 신호 생성</td><td>디코더와 스텝 카운터의 정보를 기반으로 제어 신호를 생성</td></tr><tr><td>Flags</td><td>상태 플래그</td><td>연산 결과나 상태 정보를 저장하고 제어 신호 생성에 활용</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="micro-programmed-hard-wired-비교">Micro-programmed, Hard-wired 비교<a href="https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#micro-programmed-hard-wired-%EB%B9%84%EA%B5%90" class="hash-link" aria-label="Micro-programmed, Hard-wired 비교에 대한 직접 링크" title="Micro-programmed, Hard-wired 비교에 대한 직접 링크">​</a></h2>
<table><thead><tr><th>구분</th><th>Micro-programmed</th><th>Hard-wired</th></tr></thead><tbody><tr><td>개념</td><td>제어 메모리에 저장된 마이크로코드를 사용하여 제어 신호를 생성하는 방식</td><td>고정된 논리 회로를 사용하여 제어 신호를 생성하는 방식</td></tr><tr><td>속도</td><td>느림, SW 처리</td><td>빠름, HW 회로</td></tr><tr><td>비용</td><td>저가</td><td>고가</td></tr><tr><td>전력소비</td><td>많음</td><td>적음</td></tr><tr><td>적용방식</td><td>CISC</td><td>RISC</td></tr><tr><td>오류발생률</td><td>디버깅 용이, 수정 가능</td><td>설계 오류 시 수정 어려움</td></tr></tbody></table>]]></content>
        <author>
            <name>Eunkwang Shin</name>
            <uri>https://github.com/gracefullight</uri>
        </author>
        <category label="professional-engineer" term="professional-engineer"/>
        <category label="pe/computer-architecture" term="pe/computer-architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[인터럽트]]></title>
        <id>https://gracefullight.dev/pe/ca/interrupt/</id>
        <link href="https://gracefullight.dev/pe/ca/interrupt/"/>
        <updated>2025-01-27T11:44:23.768Z</updated>
        <summary type="html"><![CDATA[Interrupt]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_OSIK" id="인터럽트의-개요">인터럽트의 개요<a href="https://gracefullight.dev/pe/ca/interrupt/#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EC%9D%98-%EA%B0%9C%EC%9A%94" class="hash-link" aria-label="인터럽트의 개요에 대한 직접 링크" title="인터럽트의 개요에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="인터럽트-개념">인터럽트 개념<a href="https://gracefullight.dev/pe/ca/interrupt/#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="인터럽트 개념에 대한 직접 링크" title="인터럽트 개념에 대한 직접 링크">​</a></h3>
<ul>
<li>컴퓨터 시스템 외부, 내부, SW적 원인으로 CPU에서 처리하던 프로그램을 중단하고 해당 동작을 처리할 수 있도록 보내는 제어신호</li>
<li>인터럽트는 SW/HW 방식으로 우선순위 판별을 통해 인터럽트 서비스 루틴 수행</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="인터럽트-유형">인터럽트 유형<a href="https://gracefullight.dev/pe/ca/interrupt/#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EC%9C%A0%ED%98%95" class="hash-link" aria-label="인터럽트 유형에 대한 직접 링크" title="인터럽트 유형에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>방법</th><th>설명</th></tr></thead><tbody><tr><td>SW</td><td>Polling 방식</td><td>프로그램을 통해 장치 Flag에 의한 우선순위 검사 방식</td></tr><tr><td>HW</td><td>Daisy-Chain 방식</td><td>우선순위 높은 장치를 물리적으로 상위에 배치하는 방식</td></tr><tr><td></td><td>Vector Interrupt 방식</td><td>고유한 번호를 부여하고 해당 번호에 대응하는 ISR 방식</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="폴링">폴링<a href="https://gracefullight.dev/pe/ca/interrupt/#%ED%8F%B4%EB%A7%81" class="hash-link" aria-label="폴링에 대한 직접 링크" title="폴링에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="폴링-개념">폴링 개념<a href="https://gracefullight.dev/pe/ca/interrupt/#%ED%8F%B4%EB%A7%81-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="폴링 개념에 대�한 직접 링크" title="폴링 개념에 대한 직접 링크">​</a></h3>
<!-- -->
<ul>
<li>SW적으로 CPU가 외부 장치의 상태를 지속적으로 검사하여 인터럽트 요청여부를 확인하는 방식</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="폴링-동작방식">폴링 동작방식<a href="https://gracefullight.dev/pe/ca/interrupt/#%ED%8F%B4%EB%A7%81-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D" class="hash-link" aria-label="폴링 동작방식에 대한 직접 링크" title="폴링 동작방식에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>동작 방식</th><th>설명</th></tr></thead><tbody><tr><td>초기화 및 확인</td><td>초기화</td><td>CPU는 외부 장치와의 통신을 위한 인터럽트 관련 레지스터 및 플래그를 초기화</td></tr><tr><td></td><td>장치 확인, 상태 확인</td><td>CPU는 특정 외부 장치(예: 입출력 장치, 타이머 등)의 상태를 주기적으로 확인하기 위해 루프를 실행하며, 루프 내에서 특정 장치에 대한 상태를 확인</td></tr><tr><td></td><td>인터럽트 여부 판단</td><td>CPU는 장치의 상태를 확인한 후 인터럽트가 발생했는지 여부를 판단하며, 특정 플래그나 레지스터의 값을 확인하여 인터럽트 여부를 판단</td></tr><tr><td>처리</td><td>인터럽트 처리</td><td>인터럽트가 발생한 경우, CPU는 해당 인터럽트에 대한 처리를 위해 인터럽트 서비스 루틴을 실행</td></tr><tr><td></td><td>루프 반복</td><td>처리가 완료되면 CPU는 다시 루프를 시작하여 다음 인터럽트가 발생했는지를 확인하고 처리</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="데이지-체인">데이지 체인<a href="https://gracefullight.dev/pe/ca/interrupt/#%EB%8D%B0%EC%9D%B4%EC%A7%80-%EC%B2%B4%EC%9D%B8" class="hash-link" aria-label="데이지 체인에 대한 직접 링크" title="데이지 체인에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="데이지-체인-개념">데이지 체인 개념<a href="https://gracefullight.dev/pe/ca/interrupt/#%EB%8D%B0%EC%9D%B4%EC%A7%80-%EC%B2%B4%EC%9D%B8-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="데이�지 체인 개념에 대한 직접 링크" title="데이지 체인 개념에 대한 직접 링크">​</a></h3>
<!-- -->
<ul>
<li>CPU와 가까운 장치가 우선순위가 높게 처리되고, 하나의 인터럽트가 다음 인터럽트를 호출하는 직렬 연계 방식</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="데이지-체인-동작방식">데이지 체인 동작방식<a href="https://gracefullight.dev/pe/ca/interrupt/#%EB%8D%B0%EC%9D%B4%EC%A7%80-%EC%B2%B4%EC%9D%B8-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D" class="hash-link" aria-label="데이지 체인 동작방식에 대한 직접 링크" title="데이지 체인 동작방식에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>동작 방식</th><th>설명</th></tr></thead><tbody><tr><td>발생 및 우선순위 전달</td><td>인터럽트 발생 및 신호 전달</td><td>외부 장치에서 인터럽트가 발생하고, 인터럽트 신호가 체인의 시작점에 있는 인터럽트 컨트롤러에게 전달</td></tr><tr><td></td><td>우선순위 확인 및 결정</td><td>체인 내의 각 인터럽트 컨트롤러는 자신의 우선순위를 확인하고, 처리할 인터럽트를 결정</td></tr><tr><td>처리 및 전달</td><td>인터럽트 처리</td><td>우선순위가 가장 높은 인터럽트 컨트롤러는 해당 인터럽트를 처리하고, 서비스 루틴을 실행</td></tr><tr><td></td><td>인터럽트 전달</td><td>처리가 완료된 인터럽트는 다음 인터럽트 컨트롤러로 전달되며, 다음 우선순위가 높은 인터럽트를 처리</td></tr><tr><td>완료 및 대기</td><td>인터럽트 처리 반복</td><td>처리가 완료되면 다음 인터럽트 컨트롤러로 넘어가며, 이 과정을 반복</td></tr><tr><td></td><td>우선순위 갱신 및 대기</td><td>모든 인터럽트가 처리되면 인터럽트 컨트롤러들은 우선순위를 다시 확인하고 새로운 인터럽트를 대기</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="벡터-인터럽트">벡터 인터럽트<a href="https://gracefullight.dev/pe/ca/interrupt/#%EB%B2%A1%ED%84%B0-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8" class="hash-link" aria-label="벡터 인터럽트에 대한 직접 링크" title="벡터 인터럽트에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="벡터-인터럽트-개념">벡터 인터럽트 개념<a href="https://gracefullight.dev/pe/ca/interrupt/#%EB%B2%A1%ED%84%B0-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="벡터 인터럽트 개념에 대한 직접 링크" title="벡터 인터럽트 개념에 대한 직접 링크">​</a></h3>
<!-- -->
<ul>
<li>각 인터럽트를 참조하는 인터럽트 벡터 테이블을 관리, 고유 벡터 주소로 서브루틴을 실행하는 방식</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="벡터-인터럽트-동작방식">벡터 인터럽트 동작방식<a href="https://gracefullight.dev/pe/ca/interrupt/#%EB%B2%A1%ED%84%B0-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D" class="hash-link" aria-label="벡터 인터럽트 동작방식에 대한 직접 링크" title="벡터 인터럽트 동작방식에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>동작 방식</th><th>설명</th></tr></thead><tbody><tr><td>인터럽트 발생 및 동작</td><td>인터럽트 발생</td><td>외부 장치에서 인터럽트가 발생</td></tr><tr><td></td><td>인터럽트 컨트롤러 동작</td><td>인터럽트 컨트롤러는 발생한 인터럽트를 CPU에 알리고 해당 인터럽트의 번호(인터럽트 벡터)를 제공</td></tr><tr><td>확인 및 처리</td><td>인터럽트 벡터 확인</td><td>CPU는 인터럽트 컨트롤러로부터 받은 인터럽트 벡터를 이용하여 인터럽트 서비스 루틴의 주소를 확인</td></tr><tr><td></td><td>인터럽트 서비스 루틴 실행</td><td>CPU는 찾아낸 인터럽트 서비스 루틴의 주소로 점프하여 해당 인터럽트를 처리</td></tr><tr><td></td><td>인터럽트 서비스 루틴 종료</td><td>인터럽트 서비스 루틴의 실행이 완료되었음을 CPU가 인식</td></tr><tr><td>복귀</td><td>프로그램 복귀</td><td>인터럽트 서비스 루틴 실행 후, CPU는 원래의 프로그램 또는 작업으로 돌아가 수행을 계속 진행</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="인터럽트-유형-비교">인터럽트 유형 비교<a href="https://gracefullight.dev/pe/ca/interrupt/#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EC%9C%A0%ED%98%95-%EB%B9%84%EA%B5%90" class="hash-link" aria-label="인터럽트 유형 비교에 대한 직접 링크" title="인터럽트 유형 비교에 대한 직접 링크">​</a></h2>
<table><thead><tr><th>구분</th><th>폴링</th><th>데이지체인</th><th>벡터인터럽트</th></tr></thead><tbody><tr><td>개념</td><td>CPU가 주기적으로 장치 상태를 확인하여 인터럽트를 처리하는 방식</td><td>인터럽트 신호가 장치 간 체인을 따라 전달되며, 우선순위가 높은 장치가 처리되는 방식</td><td>각 장치가 고유의 인터럽트 벡터를 가지며, 벡터를 통해 해당 장치를 즉시 처리하는 방식</td></tr><tr><td>방식</td><td>SW</td><td>HW</td><td>HW</td></tr><tr><td>속도</td><td>느림</td><td>중간, 체인 길이에 따른 지연</td><td>빠름, 벡터 주소로 즉시 처리</td></tr><tr><td>장점</td><td>구현 간단, 추가 HW 불필요</td><td>단일 인터럽트 라인으로 여러 장치 처리 가능</td><td>빠른 속도, 유연한 우선순위</td></tr><tr><td></td><td>단순한 시스템에 효율적</td><td>우선순위 제어 용이</td><td>복잡한 시스템에서 효율적</td></tr><tr><td>단점</td><td>CPU 자원 소모, 성능 저하</td><td>체인 길이가 길어질 시 병목 발생</td><td>구현 복잡, 추가 HW 비용</td></tr><tr><td></td><td>느린 반응 속도</td><td>장치 추가 시 체인 구조 변경 필요</td><td>벡터 테이블 구성/관리 비용</td></tr></tbody></table>]]></content>
        <author>
            <name>Eunkwang Shin</name>
            <uri>https://github.com/gracefullight</uri>
        </author>
        <category label="professional-engineer" term="professional-engineer"/>
        <category label="pe/computer-architecture" term="pe/computer-architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[IEC 62443]]></title>
        <id>https://gracefullight.dev/pe/sec/iec-62443/</id>
        <link href="https://gracefullight.dev/pe/sec/iec-62443/"/>
        <updated>2025-01-27T06:57:38.848Z</updated>
        <summary type="html"><![CDATA[IEC 62443]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_OSIK" id="iec-62443-개념">IEC 62443 개념<a href="https://gracefullight.dev/pe/sec/iec-62443/#iec-62443-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="IEC 62443 개념에 대한 직접 링크" title="IEC 62443 개념에 대한 직접 링크">​</a></h2>
<ul>
<li>산업제어시스템(IACS) 보안관리 요구사항과 보안기술, 제품의 개발 요구사항 및 구성요소에 대한 기술적 보안 요구사항 등이 정의되어 있는 산업제어시스템 보안 국제 표준</li>
<li>스마트팩토리, 에너지 관리, 공공 인프라의 실시간 데이터 처리와 안정적 운영, 제어시스템 보안을 위해 필요</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="iec-62443-구성도-구성요소-보안안정성기준">IEC 62443 구성도, 구성요소, 보안안정성기준<a href="https://gracefullight.dev/pe/sec/iec-62443/#iec-62443-%EA%B5%AC%EC%84%B1%EB%8F%84-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C-%EB%B3%B4%EC%95%88%EC%95%88%EC%A0%95%EC%84%B1%EA%B8%B0%EC%A4%80" class="hash-link" aria-label="IEC 62443 구성도, 구성요소, 보안안정성기준에 대한 직접 링크" title="IEC 62443 구성도, 구성요소, 보안안정성기준에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="iec-62443-구성도">IEC 62443 구성도<a href="https://gracefullight.dev/pe/sec/iec-62443/#iec-62443-%EA%B5%AC%EC%84%B1%EB%8F%84" class="hash-link" aria-label="IEC 62443 구성도에 대한 직접 링크" title="IEC 62443 구성도에 대한 직접 링크">​</a></h3>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="iec-62443-구성요소">IEC 62443 구성요소<a href="https://gracefullight.dev/pe/sec/iec-62443/#iec-62443-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C" class="hash-link" aria-label="IEC 62443 구성요소에 대한 직접 링크" title="IEC 62443 구성요소에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>구분</th><th>항목</th><th>내용</th></tr></thead><tbody><tr><td>General (Part 1)</td><td>용어 정의, 개념, 모델</td><td>7가지 FR(Foundational Requirements) 정의: 식별 및 인증(FR1), 사용자 제어(FR2), 시스템 무결성(FR3), 데이터 기밀성(FR4), 제한된 데이터 흐름(FR5), 이벤트 대응(FR6), 자원 가용성(FR7)</td></tr><tr><td></td><td>용어 및 약어 사전</td><td>IACS 보안에서 사용하는 용어와 약어의 정의 제공, 마스터 용어집 작성</td></tr><tr><td></td><td>시스템 보안 적합성 측정</td><td>IACS의 보안 적합성을 측정할 수 있는 기준과 메트릭 정의</td></tr><tr><td>Policies &amp; Procedures (Part 2)</td><td>보안 프로그램 수립</td><td>사이버 보안 관리 시스템 구축을 위한 정책, 운영 절차 정의</td></tr><tr><td></td><td>보안 관리 가이드</td><td>보안 관리 시스템의 설계, 구현, 운영, 유지보수 가이드를 제공</td></tr><tr><td></td><td>환경 패치 관리</td><td>IT 환경과 다른 IACS 보안 패치 관리 요건 기술</td></tr><tr><td>System (Part 3)</td><td>보안 기술 및 시스템 설계</td><td>IACS 설계 및 유지보수 시 필요한 보안 기술과 요구사항 정의</td></tr><tr><td></td><td>네트워크 및 데이터 보안</td><td>IACS 네트워크 및 데이터 흐름의 보안 목표와 구현 방식 정의</td></tr><tr><td></td><td>위험 관리 및 요구 사항</td><td>시스템 운영 중 발생할 수 있는 위험 요소를 식별하고, 이에 대응하기 위한 요구 사항 정의</td></tr><tr><td>Component (Part 4)</td><td>제품 보안 개발 요구 사항</td><td>보안개발생명주기(SDLC) 요구 사항 및 제품 설계에 따른 보안 기술 정의</td></tr><tr><td></td><td>IACS 컴포넌트 요구 사항</td><td>7가지 FR에 기반하여 각 컴포넌트의 구체적인 보안 요구 사항 제시</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="iec-62443-보안안정성기준">IEC 62443 보안안정성기준<a href="https://gracefullight.dev/pe/sec/iec-62443/#iec-62443-%EB%B3%B4%EC%95%88%EC%95%88%EC%A0%95%EC%84%B1%EA%B8%B0%EC%A4%80" class="hash-link" aria-label="IEC 62443 보안안정성기준에 대한 직접 링크" title="IEC 62443 보안안정성기준에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>레벨</th><th>설명</th><th>비고</th></tr></thead><tbody><tr><td>SL 1</td><td>무의도적 위협에 대한 보호</td><td>인적 오류로 인한 시스템 오작동 방지</td></tr><tr><td>SL 2</td><td>의도적이지만 단순한 위협에 대한 보호</td><td>저숙련 해커의 단순 공격 방지</td></tr><tr><td>SL 3</td><td>의도적이고 복잡한 위협에 대한 보호</td><td>숙련된 해커의 정교한 공격 방지</td></tr><tr><td>SL 4</td><td>고도의 의도적이고 복잡한 위협에 대한 보호</td><td>자원이 풍부한 공격자의 지속적이고 정교한 공격 방지</td></tr></tbody></table>]]></content>
        <author>
            <name>Eunkwang Shin</name>
            <uri>https://github.com/gracefullight</uri>
        </author>
        <category label="professional-engineer" term="professional-engineer"/>
        <category label="pe/security" term="pe/security"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ISO 31000]]></title>
        <id>https://gracefullight.dev/pe/sec/iso-31000/</id>
        <link href="https://gracefullight.dev/pe/sec/iso-31000/"/>
        <updated>2025-01-27T06:19:33.633Z</updated>
        <summary type="html"><![CDATA[ISO 31000]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_OSIK" id="iso-31000-개념">ISO 31000 개념<a href="https://gracefullight.dev/pe/sec/iso-31000/#iso-31000-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="ISO 31000 개념에 대한 직접 링크" title="ISO 31000 개념에 대한 직접 링크">​</a></h2>
<ul>
<li>조직의 효과적인 리스크 관리를 위한 세부 원칙, 프레임워크, 프로세스를 제시하고 가이드라인을 제공하는 국제 표준</li>
<li>리스크기반 의사결정 / 조직 회복력 강화 / 조직 목표달성 지원</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_OSIK" id="iso-31000-프레임워크-세부-절차">ISO 31000 프레임워크, 세부 절차<a href="https://gracefullight.dev/pe/sec/iso-31000/#iso-31000-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EC%84%B8%EB%B6%80-%EC%A0%88%EC%B0%A8" class="hash-link" aria-label="ISO 31000 프레임워크, 세부 절차에 대한 직접 링크" title="ISO 31000 프레임워크, 세부 절차에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="iso-31000-프레임워크">ISO 31000 프레임워크<a href="https://gracefullight.dev/pe/sec/iso-31000/#iso-31000-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC" class="hash-link" aria-label="ISO 31000 프레임워크에 대한 직접 링크" title="ISO 31000 프레임워크에 대한 직접 링크">​</a></h3>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_OSIK" id="iso-31000-세부-절차">ISO 31000 세부 절차<a href="https://gracefullight.dev/pe/sec/iso-31000/#iso-31000-%EC%84%B8%EB%B6%80-%EC%A0%88%EC%B0%A8" class="hash-link" aria-label="ISO 31000 세부 절차에 대한 직접 링크" title="ISO 31000 세부 절차에 대한 직접 링크">​</a></h3>
<table><thead><tr><th>절차</th><th>내용</th><th>설명</th></tr></thead><tbody><tr><td>의사소통 및 협의</td><td>조직의 위험 인식에 대한 공유 및 협의</td><td>조직의 위험 관리 프로세스에서 모든 이해관계자의 참여를 유도</td></tr><tr><td>맥락 이해</td><td>조직의 운영 현황과 주변 환경에 대한 이해</td><td>위험 관리의 배경 및 범위를 정의</td></tr><tr><td>위험식별</td><td>조직의 목표에 위협할 영향을 줄 수 있는 내·외부 사건의 파악</td><td>위험사건이 어떻게 발생하고 영향을 줄 것인지 분석</td></tr><tr><td>위험분석</td><td>위험사건의 확률과 피해에 대한 예측 및 위험수용</td><td>정량적/정성적 분석을 통해 위험의 심각성 평가</td></tr><tr><td>위험평가</td><td>정책 대응 여부 판단</td><td>위험등급을 기반으로 직면한 위험 대응</td></tr><tr><td>위험대응</td><td>위험 발생을 줄이거나 통제하는 행동</td><td>회피, 전가, 감수, 수용, 이관, 종료</td></tr><tr><td>감독 및 보고</td><td>모니터링과 평가를 통한 조직 학습</td><td>위험관리 후 지속적인 평가와 개선</td></tr></tbody></table>]]></content>
        <author>
            <name>Eunkwang Shin</name>
            <uri>https://github.com/gracefullight</uri>
        </author>
        <category label="professional-engineer" term="professional-engineer"/>
        <category label="pe/security" term="pe/security"/>
    </entry>
</feed>