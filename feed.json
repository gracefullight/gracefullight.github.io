{
    "version": "https://jsonfeed.org/version/1",
    "title": "gracefullight.dev Blog",
    "home_page_url": "https://gracefullight.dev/",
    "description": "gracefullight.dev Blog",
    "items": [
        {
            "id": "https://gracefullight.dev/pe/pm/운영단계-대가산정/",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"운영단계-대가산정-개념\">운영단계 대가산정 개념<a href=\"https://gracefullight.dev/pe/pm/%EC%9A%B4%EC%98%81%EB%8B%A8%EA%B3%84-%EB%8C%80%EA%B0%80%EC%82%B0%EC%A0%95/#%EC%9A%B4%EC%98%81%EB%8B%A8%EA%B3%84-%EB%8C%80%EA%B0%80%EC%82%B0%EC%A0%95-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"운영단계 대가산정 개념에 대한 직접 링크\" title=\"운영단계 대가산정 개념에 대한 직접 링크\">​</a></h2>\n<!-- -->\n<ul>\n<li>SW진흥법 제 10조 의거, SW수명주기 중 운영단계 사업 및 서비스의 적정대가를 산정하기 위한 지침</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"운영단계-대가산정-방식\">운영단계 대가산정 방식<a href=\"https://gracefullight.dev/pe/pm/%EC%9A%B4%EC%98%81%EB%8B%A8%EA%B3%84-%EB%8C%80%EA%B0%80%EC%82%B0%EC%A0%95/#%EC%9A%B4%EC%98%81%EB%8B%A8%EA%B3%84-%EB%8C%80%EA%B0%80%EC%82%B0%EC%A0%95-%EB%B0%A9%EC%8B%9D\" class=\"hash-link\" aria-label=\"운영단계 대가산정 방식에 대한 직접 링크\" title=\"운영단계 대가산정 방식에 대한 직접 링크\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"응용sw요율제-유지관리비-산정방식\">응용SW요율제 유지관리비 산정방식<a href=\"https://gracefullight.dev/pe/pm/%EC%9A%B4%EC%98%81%EB%8B%A8%EA%B3%84-%EB%8C%80%EA%B0%80%EC%82%B0%EC%A0%95/#%EC%9D%91%EC%9A%A9sw%EC%9A%94%EC%9C%A8%EC%A0%9C-%EC%9C%A0%EC%A7%80%EA%B4%80%EB%A6%AC%EB%B9%84-%EC%82%B0%EC%A0%95%EB%B0%A9%EC%8B%9D\" class=\"hash-link\" aria-label=\"응용SW요율제 유지관리비 산정방식에 대한 직접 링크\" title=\"응용SW요율제 유지관리비 산정방식에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>내용</th><th>산출물</th></tr></thead><tbody><tr><td>1 사전준비</td><td>유지관리 대상 SW 식별</td><td>유지관리 대상 SW</td></tr><tr><td>2 유지관리대상 SW 개발비 재산정</td><td>유지관리 대상 SW 개발비를 유지관리 계약적정 FP와 단가로 재산정</td><td>SW개발비 (현재가치)</td></tr><tr><td>3 유지관리 총량 계산</td><td>유지관리횟수, 시스템사용자수, 시스템중요도, 연계, 오류복구신속성 따른 난이도 계산 후 반영</td><td>총 유지관리점수 (TMP)</td></tr><tr><td>4 유지관리 운용예산</td><td>총 건수, 미충 요율 계산</td><td>유지관리 요율</td></tr><tr><td></td><td>요율 = 10 + 5TMP/100</td><td></td></tr><tr><td>5 직접경비 계산</td><td>유지관리실제소요 경비산정</td><td>직접 경비</td></tr><tr><td>6 SW 유지관리비 산정</td><td>SW유지관리비 산정</td><td>SW 유지관리비</td></tr><tr><td></td><td>SW개발비 * 유지관리요율 + 직접경비</td><td></td></tr></tbody></table>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"sw운영-투입공수-산정방식\">SW운영 투입공수 산정방식<a href=\"https://gracefullight.dev/pe/pm/%EC%9A%B4%EC%98%81%EB%8B%A8%EA%B3%84-%EB%8C%80%EA%B0%80%EC%82%B0%EC%A0%95/#sw%EC%9A%B4%EC%98%81-%ED%88%AC%EC%9E%85%EA%B3%B5%EC%88%98-%EC%82%B0%EC%A0%95%EB%B0%A9%EC%8B%9D\" class=\"hash-link\" aria-label=\"SW운영 투입공수 산정방식에 대한 직접 링크\" title=\"SW운영 투입공수 산정방식에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>내용</th><th>산출물</th></tr></thead><tbody><tr><td>1 사전준비</td><td>운영 대상 SW 식별, 세부 운영 서비스 항목 정의</td><td>운영 대상 SW 및 서비스 항목</td></tr><tr><td>2 운영 공수 계산</td><td>SW 운영 업무 특성 고려, 필요 직무, 직무별 투입인력, 기간 결정</td><td>IT 직무별 투입공수</td></tr><tr><td>3 직접 인건비 계산</td><td>운영 업무 수행 인력의 직접 인건비 계산</td><td>직접인건비</td></tr><tr><td></td><td>직접 인건비 = 투입인력 기술자 직무공수 * SW기술자 평균임금</td><td></td></tr><tr><td>4 제경비 및 기술료 계산</td><td>운영업무 수행 인력의 제경비와 기술료 계산</td><td>제경비, 기술료</td></tr><tr><td></td><td>제경비 = 작업 인건비 × 144<del>154% / 기술료 = (직접 인건비 + 제경비) × 20</del>40%</td><td></td></tr><tr><td>5 직접 경비 계산</td><td>당해 업무 내 현재 요소로 직접 경비 산정</td><td>직접 경비</td></tr><tr><td>6 SW 운영비 산정</td><td>SW 운영비 산정</td><td>SW운영비</td></tr><tr><td></td><td>직접인건비 + 제경비 + 기술료 + 직접 경비</td><td></td></tr></tbody></table>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"고정비-변동비-산정방식\">고정비, 변동비 산정방식<a href=\"https://gracefullight.dev/pe/pm/%EC%9A%B4%EC%98%81%EB%8B%A8%EA%B3%84-%EB%8C%80%EA%B0%80%EC%82%B0%EC%A0%95/#%EA%B3%A0%EC%A0%95%EB%B9%84-%EB%B3%80%EB%8F%99%EB%B9%84-%EC%82%B0%EC%A0%95%EB%B0%A9%EC%8B%9D\" class=\"hash-link\" aria-label=\"고정비, 변동비 산정방식에 대한 직접 링크\" title=\"고정비, 변동비 산정방식에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>내용</th><th>산출물</th></tr></thead><tbody><tr><td>1 사전준비</td><td>유지관리 및 운영대상 SW 식별</td><td>유지관리 및 운영대상 SW</td></tr><tr><td></td><td>대상 SW별 유지관리/운영업무 식별</td><td></td></tr><tr><td>2 고정비/변동비 업무 구분</td><td>대상 업무 중 완전유지관리 기능개선 해당업무(변동비) 구분</td><td>고정비/변동비 업무분류표</td></tr><tr><td></td><td>대상 업무 중 비기능 개선업무(고정비) 구분</td><td></td></tr><tr><td>3 고정비/변동비 산정</td><td>SW재개발비 산정방식으로 변동비 산정</td><td>고정비 산정표</td></tr><tr><td></td><td>투입공수 방식 운영비 산정방식 적용 고정비 산정</td><td>변동비 산정표</td></tr><tr><td>4 직접경비계산</td><td>당해업무 실제소요경비 산정</td><td>직접경비</td></tr><tr><td>5 SW유지관리/운영비 산정</td><td>SW유지관리/운영비 산정</td><td>SW 유지관리 및 운영비</td></tr><tr><td></td><td>고정비 + 변동비 + 직접경비</td><td></td></tr></tbody></table>",
            "url": "https://gracefullight.dev/pe/pm/운영단계-대가산정/",
            "title": "운영단계 대가산정",
            "summary": "운영단계 대가산정",
            "date_modified": "2025-01-28T10:51:01.251Z",
            "author": {
                "name": "Eunkwang Shin",
                "url": "https://github.com/gracefullight"
            },
            "tags": [
                "professional-engineer",
                "pe/project-management"
            ]
        },
        {
            "id": "https://gracefullight.dev/pe/pm/클라우드-전환사업의-단계별-감리/",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"클라우드-전환사업-단계별-감리-개념\">클라우드 전환사업 단계별 감리 개념<a href=\"https://gracefullight.dev/pe/pm/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85%EC%9D%98-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC/#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"클라우드 전환사업 단계별 감리 개념에 대한 직접 링크\" title=\"클라우드 전환사업 단계별 감리 개념에 대한 직접 링크\">​</a></h2>\n<ul>\n<li>기관이 구축/운영 중인 정보시스템 어플리케이션의 변경 없이 인프라 자원을 대상으로 클라우드로 전환하는 사업에 대한 감리를 수행하여 적정성을 평가</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"클라우드-전환사업-단계별-감리-개념도-단계별-감리-방법-클라우드-전환사업-검토항목\">클라우드 전환사업 단계별 감리 개념도, 단계별 감리 방법, 클라우드 전환사업 검토항목<a href=\"https://gracefullight.dev/pe/pm/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85%EC%9D%98-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC/#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC-%EA%B0%9C%EB%85%90%EB%8F%84-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC-%EB%B0%A9%EB%B2%95-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85-%EA%B2%80%ED%86%A0%ED%95%AD%EB%AA%A9\" class=\"hash-link\" aria-label=\"클라우드 전환사업 단계별 감리 개념도, 단계별 감리 방법, 클라우드 전환사업 검토항목에 대한 직접 링크\" title=\"클라우드 전환사업 단계별 감리 개념도, 단계별 감리 방법, 클라우드 전환사업 검토항목에 대한 직접 링크\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"클라우드-전환사업-단계별-감리-개념도\">클라우드 전환사업 단계별 감리 개념도<a href=\"https://gracefullight.dev/pe/pm/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85%EC%9D%98-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC/#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC-%EA%B0%9C%EB%85%90%EB%8F%84\" class=\"hash-link\" aria-label=\"클라우드 전환사업 단계별 감리 개념도에 대한 직접 링크\" title=\"클라우드 전환사업 단계별 감리 개념도에 대한 직접 링크\">​</a></h3>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"클라우드 감리\" src=\"https://gracefullight.dev/assets/images/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%EA%B0%90%EB%A6%AC-4d35f722acbc1a78128c0a6ad5002e15.jpg\" width=\"2408\" height=\"676\" class=\"img_xC7_\"></p>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"클라우드-전환사업-단계별-감리-방법\">클라우드 전환사업 단계별 감리 방법<a href=\"https://gracefullight.dev/pe/pm/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85%EC%9D%98-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC/#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC-%EB%B0%A9%EB%B2%95\" class=\"hash-link\" aria-label=\"클라우드 전환사업 단계별 감리 방법에 대한 직접 링크\" title=\"클라우드 전환사업 단계별 감리 방법에 대한 직접 링크\">​</a></h3>\n<h4 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"클라우드-전환-사업-계획-수립신청\">클라우드 전환 사업 계획 수립/신청<a href=\"https://gracefullight.dev/pe/pm/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85%EC%9D%98-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC/#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98-%EC%82%AC%EC%97%85-%EA%B3%84%ED%9A%8D-%EC%88%98%EB%A6%BD%EC%8B%A0%EC%B2%AD\" class=\"hash-link\" aria-label=\"클라우드 전환 사업 계획 수립/신청에 대한 직접 링크\" title=\"클라우드 전환 사업 계획 수립/신청에 대한 직접 링크\">​</a></h4>\n<table><thead><tr><th>단계</th><th>활동</th><th>세부 내용</th></tr></thead><tbody><tr><td>전환 계획 수립 및 준비</td><td>전환 타당성 검토</td><td>클라우드 기반 전환 가능성에 대한 검토 적절성 확인</td></tr><tr><td></td><td>요구사항 및 영향도 분석</td><td>전환 따른 이해관계자 요구사항, OS 지원 영향도 확인</td></tr><tr><td></td><td>자원 구성, 사용량 확정</td><td>성능 안정성 확보 위한 자원 점검 및 사용권 확인</td></tr><tr><td></td><td>구축 및 테스트 계획 수립</td><td>전환에 따른 업무 중단 최소화, 안정성 유지 방안 구축 및 테스트 계획</td></tr><tr><td>전환 실행</td><td>nTOPS 계정 산정</td><td>nTOPS 통합 계정 및 전환 산정 적절성 확인</td></tr><tr><td></td><td>원격접근, 방화벽 방안 산정</td><td>환경 특성 따른 경로 확인, 방화벽 신청 적절성 검토</td></tr></tbody></table>\n<h4 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"클라우드-전환-사업-실행서비스-안정화\">클라우드 전환 사업 실행/서비스 안정화<a href=\"https://gracefullight.dev/pe/pm/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85%EC%9D%98-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC/#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98-%EC%82%AC%EC%97%85-%EC%8B%A4%ED%96%89%EC%84%9C%EB%B9%84%EF%BF%BD%EC%8A%A4-%EC%95%88%EC%A0%95%ED%99%94\" class=\"hash-link\" aria-label=\"클라우드 전환 사업 실행/서비스 안정화에 대한 직접 링크\" title=\"클라우드 전환 사업 실행/서비스 안정화에 대한 직접 링크\">​</a></h4>\n<table><thead><tr><th>단계</th><th>활동</th><th>세부 내용</th></tr></thead><tbody><tr><td>클라우드 전환</td><td>APP 수정 개발</td><td>IP 변경, 트래픽 분배 등으로 인한 APP 수정 요구 적정성 확인, 테스트 수행</td></tr><tr><td></td><td>APP 원상 복구 설계</td><td>WAS, DB 서버 SW 이관과정의 정상 작동 확인, 연계 SW 영향도 분석</td></tr><tr><td></td><td>클라우드 서비스 이용 환경 구축</td><td>클라우드 리소스를 효율적으로 활용할 수 있는 환경 설정 확인</td></tr><tr><td></td><td>보안 취약점 점검</td><td>HW, APP 등 지원 위험요인 파악, 취약점 분석 및 대응방안 마련</td></tr><tr><td></td><td>데이터 이관</td><td>데이터 이관 계획 수립 및 데이터 무결성 검증 확인</td></tr><tr><td></td><td>통합 테스트 수행</td><td>사용자 환경에서 시나리오 기반 통합 테스트 수행 및 작업 결과 확인</td></tr><tr><td>서비스 안정화</td><td>서비스 전환 및 안정화</td><td>안정적 전환을 위한 APP 및 사용 SW 내 예외 기술 지원 여부, 적정 운영 검토</td></tr></tbody></table>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"클라우드-전환사업-검토항목\">클라우드 전환사업 검토항목<a href=\"https://gracefullight.dev/pe/pm/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85%EC%9D%98-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%90%EB%A6%AC/#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A0%84%ED%99%98%EC%82%AC%EC%97%85-%EA%B2%80%ED%86%A0%ED%95%AD%EB%AA%A9\" class=\"hash-link\" aria-label=\"클라우드 전환사업 검토항목에 대한 직접 링크\" title=\"클라우드 전환사업 검토항목에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>부문</th><th>점검항목</th><th>세부 내용</th></tr></thead><tbody><tr><td>전환 적정성 평가</td><td>클라우드 전환 가능성</td><td>정보시스템 특성과 클라우드 환경 간 적합성 검토</td></tr><tr><td></td><td>상용 SW를 공개 SW로 전환 가능 여부</td><td>현재 상용 SW의 오픈소스 전환 가능성 평가</td></tr><tr><td></td><td>업무단위 이관 가능 여부</td><td>업무시스템별 클라우드 전환 가능성 검토</td></tr><tr><td>인프라/시스템 분석</td><td>장비 사용연한 만료 여부</td><td>장비교체주기 고려한 전환 필요성 검토</td></tr><tr><td></td><td>SW 기술지원 만료여부</td><td>SW기술지원 만료상태 확인</td></tr><tr><td></td><td>시스템용랴안정</td><td>CPU, 메모리, 디스크용량 등 시스템자원 산정</td></tr><tr><td></td><td>시스템 구성</td><td>클라우드 전환을 위한 시스템 구성요소 결정</td></tr><tr><td>NW 및 보안 영향성</td><td>고립망, DR 활용 여부</td><td>재해복구(DR) 또는 고립망 구성 필요성 검토</td></tr><tr><td></td><td>인터넷과 행정서비스 간 데이터 연동 필요여부</td><td>내외부간 데이터 동기화 등 데이터 연동 필요성 검토</td></tr></tbody></table>",
            "url": "https://gracefullight.dev/pe/pm/클라우드-전환사업의-단계별-감리/",
            "title": "클라우드 전환사업의 단계별 감리",
            "summary": "클라우드 전환사업의 단계별 감리",
            "date_modified": "2025-01-28T10:35:34.740Z",
            "author": {
                "name": "Eunkwang Shin",
                "url": "https://github.com/gracefullight"
            },
            "tags": [
                "professional-engineer",
                "pe/project-management"
            ]
        },
        {
            "id": "https://gracefullight.dev/pe/sw/solid-principles/",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"solid-원칙-개념\">SOLID 원칙 개념<a href=\"https://gracefullight.dev/pe/sw/solid-principles/#solid-%EC%9B%90%EC%B9%99-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"SOLID 원칙 개념에 대한 직접 링크\" title=\"SOLID 원칙 개념에 대한 직접 링크\">​</a></h2>\n<!-- -->\n<ul>\n<li>객체지향 설계시 SOLID 5가지 원칙을 준수하여 유지보수성과 확장성을 가진 유연한 소프트웨어 구현 가능</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"단일책임원칙과-개방폐쇄원칙\">단일책임원칙과 개방폐쇄원칙<a href=\"https://gracefullight.dev/pe/sw/solid-principles/#%EB%8B%A8%EC%9D%BC%EC%B1%85%EC%9E%84%EC%9B%90%EC%B9%99%EA%B3%BC-%EA%B0%9C%EB%B0%A9%ED%8F%90%EC%87%84%EC%9B%90%EC%B9%99\" class=\"hash-link\" aria-label=\"단일책임원칙과 개방폐쇄원칙에 대한 직접 링크\" title=\"단일책임원칙과 개방폐쇄원칙에 대한 직접 링크\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"단일책임원칙\">단일책임원칙<a href=\"https://gracefullight.dev/pe/sw/solid-principles/#%EB%8B%A8%EC%9D%BC%EC%B1%85%EC%9E%84%EC%9B%90%EC%B9%99\" class=\"hash-link\" aria-label=\"단일책임원칙에 대한 직접 링크\" title=\"단일책임원칙에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>설명</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding=\"async\" loading=\"lazy\" alt=\"srp\" src=\"https://gracefullight.dev/assets/images/srp-d3c11735d1bc0660d50539236c688f73.jpg\" width=\"658\" height=\"476\" class=\"img_xC7_\"></td></tr><tr><td>개념</td><td>객체는 단 하나의 책임만 가져야한다는 원칙</td></tr><tr><td>특징</td><td>변경에 대한 의존성 극복, 응집도 향상</td></tr><tr><td>예시</td><td>파일 읽기, 쓰기 클래스 분리</td></tr></tbody></table>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"개방폐쇄원칙\">개방폐쇄원칙<a href=\"https://gracefullight.dev/pe/sw/solid-principles/#%EA%B0%9C%EB%B0%A9%ED%8F%90%EC%87%84%EC%9B%90%EC%B9%99\" class=\"hash-link\" aria-label=\"개방폐쇄원칙에 대한 직접 링크\" title=\"개방폐쇄원칙에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>설명</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding=\"async\" loading=\"lazy\" alt=\"ocp\" src=\"https://gracefullight.dev/assets/images/ocp-c40011511a177257160ca6be90353fd4.jpg\" width=\"594\" height=\"484\" class=\"img_xC7_\"></td></tr><tr><td>개념</td><td>클래스는 확장에는 열리고 수정에는 닫혀있어야한다는 원칙</td></tr><tr><td>특징</td><td>추상화로인한 다형성, 확장성, 객체지향 장점 극대화</td></tr><tr><td>예시</td><td>새로운 기능 추가시 추상클래스 활용</td></tr></tbody></table>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"리스코프-치환원칙과-인터페이스-분리원칙\">리스코프 치환원칙과 인터페이스 분리원칙<a href=\"https://gracefullight.dev/pe/sw/solid-principles/#%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B9%98%ED%99%98%EC%9B%90%EC%B9%99%EA%B3%BC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B6%84%EB%A6%AC%EC%9B%90%EC%B9%99\" class=\"hash-link\" aria-label=\"리스코프 치환원칙과 인터페이스 분리원칙에 대한 직접 링크\" title=\"리스코프 치환원칙과 인터페이스 분리원칙에 대한 직접 링크\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"리스코프-치환원칙\">리스코프 치환원칙<a href=\"https://gracefullight.dev/pe/sw/solid-principles/#%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B9%98%ED%99%98%EC%9B%90%EC%B9%99\" class=\"hash-link\" aria-label=\"리스코프 치환원칙에 대한 직접 링크\" title=\"리스코프 치환원칙에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>설명</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding=\"async\" loading=\"lazy\" alt=\"lsp\" src=\"https://gracefullight.dev/assets/images/lsp-d5b22d9b4cd2f7a4ba4138a472111cda.jpg\" width=\"586\" height=\"410\" class=\"img_xC7_\"></td></tr><tr><td>개념</td><td>상위 클래스는 하위 클래스로 대체 될 수 있어야한다는 원칙</td></tr><tr><td>특징</td><td>상속을 통한 재사용성 확보, 부모-자식 클래스 간 IS-A 관계 보장</td></tr><tr><td>예시</td><td>HashSet은 Set의 add 메소드 사용 가능</td></tr></tbody></table>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"인터페이스-분리원칙\">인터페이스 분리원칙<a href=\"https://gracefullight.dev/pe/sw/solid-principles/#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B6%84%EB%A6%AC%EC%9B%90%EC%B9%99\" class=\"hash-link\" aria-label=\"인터페이스 분리원칙에 대한 직접 링크\" title=\"인터페이스 분리원칙에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>설명</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding=\"async\" loading=\"lazy\" alt=\"isp\" src=\"https://gracefullight.dev/assets/images/isp-d556ba7f13baf5dca6735d531481bfa8.jpg\" width=\"618\" height=\"484\" class=\"img_xC7_\"></td></tr><tr><td>개념</td><td>클라이언트는 자신이 사용하는 인터페이스만 의존해야하는 원칙</td></tr><tr><td>특징</td><td>클라이언트에 목적과 용도에 적합한 인터페이스 제공, 확장성 증가</td></tr><tr><td>예시</td><td>Pet 인터페이스 분리로 짖는 기능 구현</td></tr></tbody></table>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"의존성역전원칙\">의존성역전원칙<a href=\"https://gracefullight.dev/pe/sw/solid-principles/#%EC%9D%98%EC%A1%B4%EC%84%B1%EC%97%AD%EC%A0%84%EC%9B%90%EC%B9%99\" class=\"hash-link\" aria-label=\"의존성역전원칙에 대한 직접 링크\" title=\"의존성역전원칙에 대한 직접 링크\">​</a></h2>\n<table><thead><tr><th>구분</th><th>설명</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding=\"async\" loading=\"lazy\" alt=\"dip\" src=\"https://gracefullight.dev/assets/images/dip-836645dd3b3ee0223ab7892fd2c66db2.jpg\" width=\"588\" height=\"426\" class=\"img_xC7_\"></td></tr><tr><td>개념</td><td>고수준 클라이언트는 저수준 모듈의 구현에 의존하지 않고, 추상화된 인터페이스에 의존해야한다는 원칙</td></tr><tr><td>특징</td><td>변화하기 어려운 인터페이스에 의존, 결합도 완화</td></tr><tr><td>예시</td><td>특정 DB클래스가 아닌 Database 인터페이스 사용 연동</td></tr></tbody></table>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"객체지향-설계시-고려사항\">객체지향 설계시 고려사항<a href=\"https://gracefullight.dev/pe/sw/solid-principles/#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%8B%9C-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD\" class=\"hash-link\" aria-label=\"객체지향 설계시 고려사항에 대한 직접 링크\" title=\"객체지향 설계시 고려사항에 대한 직접 링크\">​</a></h2>\n<ul>\n<li>SonarLint 등 정적분석도구 활용 SOLID 원칙 준수 감사</li>\n<li>예방비용을 높여 SW품질 향상 필요</li>\n</ul>",
            "url": "https://gracefullight.dev/pe/sw/solid-principles/",
            "title": "SOLID 원칙",
            "summary": "SOLID Principles",
            "date_modified": "2025-01-28T09:17:54.375Z",
            "author": {
                "name": "Eunkwang Shin",
                "url": "https://github.com/gracefullight"
            },
            "tags": [
                "professional-engineer",
                "pe/software-engineering"
            ]
        },
        {
            "id": "https://gracefullight.dev/pe/ca/multi-gpu/",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"멀티-gpu-개요\">멀티 GPU 개요<a href=\"https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%EA%B0%9C%EC%9A%94\" class=\"hash-link\" aria-label=\"멀티 GPU 개요에 대한 직접 링크\" title=\"멀티 GPU 개요에 대한 직접 링크\">​</a></h2>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"multi gpu trends\" src=\"https://gracefullight.dev/assets/images/multi-gpu-trends-490e3d4995df05fbb4f0bf2b1098164f.jpg\" width=\"1646\" height=\"700\" class=\"img_xC7_\"></p>\n<ul>\n<li>딥러닝에서 대규모 신경망을 효율적으로 학습하기 위해 GPU 활용, 다수 GPU를 연결하기 위한 인터커넥트 기술 발전으로 멀티 GPU 필요성 증가</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"멀티-gpu-구성도-핵심요소-장점\">멀티 GPU 구성도, 핵심요소, 장점<a href=\"https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%EA%B5%AC%EC%84%B1%EB%8F%84-%ED%95%B5%EC%8B%AC%EC%9A%94%EC%86%8C-%EC%9E%A5%EC%A0%90\" class=\"hash-link\" aria-label=\"멀티 GPU 구성도, 핵심요소, 장점에 대한 직접 링크\" title=\"멀티 GPU 구성도, 핵심요소, 장점에 대한 직접 링크\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"멀티-gpu-구성도\">멀티 GPU 구성도<a href=\"https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%EA%B5%AC%EC%84%B1%EB%8F%84\" class=\"hash-link\" aria-label=\"멀티 GPU 구성도에 대한 직접 링크\" title=\"멀티 GPU 구성도에 대한 직접 링크\">​</a></h3>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"multi gpu\" src=\"https://gracefullight.dev/assets/images/multi-gpu-dc7fe8ab691b08f33e4d89f5b0270cb5.jpg\" width=\"2866\" height=\"790\" class=\"img_xC7_\"></p>\n<ul>\n<li>여러 개의 GPU를 동시에 사용하여 대규모 신경망 학습 및 추론 훈련</li>\n</ul>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"멀티-gpu-핵심요소\">멀티 GPU 핵심요소<a href=\"https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%ED%95%B5%EC%8B%AC%EC%9A%94%EC%86%8C\" class=\"hash-link\" aria-label=\"멀티 GPU 핵심요소에 대한 직접 링크\" title=\"멀티 GPU 핵심요소에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>역할</th><th>설명</th></tr></thead><tbody><tr><td>SM (Streaming Multiprocessor)</td><td>연산 처리 유닛</td><td>GPU 내부에서 병렬 연산을 수행하는 핵심 유닛으로, 작업을 처리하고 메모리 관리 유닛으로 데이터를 전달</td></tr><tr><td>MMU (Memory Management Unit)</td><td>메모리 관리</td><td>GPU의 메모리 액세스를 관리하고 가상 메모리 주소를 물리 메모리 주소로 변환</td></tr><tr><td>NVLink NIC</td><td>데이터 전송 인터페이스</td><td>NVLink를 통해 GPU 간의 고속 데이터 전송을 담당</td></tr><tr><td>NVLink Network Switch</td><td>데이터 전송 경로 관리</td><td>여러 GPU 간 데이터 흐름을 관리하고, 최적의 전송 경로를 설정</td></tr><tr><td>TLB (Translation Lookaside Buffer)</td><td>주소 변환 캐싱</td><td>MMU에서 자주 사용하는 주소 변환 결과를 캐싱하여 속도 향상</td></tr><tr><td>HBM (High Bandwidth Memory)</td><td>고속 메모리</td><td>고속 메모리로 데이터 저장 및 접근을 지원, GPU 연산 속도 최적화</td></tr></tbody></table>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"멀티-gpu-장점\">멀티 GPU 장점<a href=\"https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%EC%9E%A5%EC%A0%90\" class=\"hash-link\" aria-label=\"멀티 GPU 장점에 대한 직접 링크\" title=\"멀티 GPU 장점에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>장점</th><th>설명</th></tr></thead><tbody><tr><td>성능향상</td><td>실시간 처리</td><td>멀티 GPU를 통해 연산 작업을 병렬로 처리하여 실시간 성능을 향상시킴</td></tr><tr><td></td><td>대규모 처리</td><td>대규모 데이터 세트나 복잡한 모델을 빠르게 학습 및 추론 가능</td></tr><tr><td>자원최적화</td><td>메모리 용량</td><td>각 GPU의 메모리를 활용하여 단일 GPU의 메모리 제한을 극복</td></tr><tr><td></td><td>모델 병렬화</td><td>모델을 여러 GPU로 분산하여 병렬 연산을 최적화</td></tr><tr><td>확장성</td><td>GPU 확장</td><td>추가 GPU를 연결하여 시스템의 연산 성능을 손쉽게 확장 가능</td></tr><tr><td></td><td>데이터 추가</td><td>대규모 데이터 처리 시 여러 GPU를 활용하여 병렬 데이터 전처리 및 학습 가능</td></tr></tbody></table>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"멀티-gpu-학습-환경-구축시-고려사항\">멀티 GPU 학습 환경 구축시 고려사항<a href=\"https://gracefullight.dev/pe/ca/multi-gpu/#%EB%A9%80%ED%8B%B0-gpu-%ED%95%99%EC%8A%B5-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%EC%8B%9C-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD\" class=\"hash-link\" aria-label=\"멀티 GPU 학습 환경 구축시 고려사항에 대한 직접 링크\" title=\"멀티 GPU 학습 환경 구축시 고려사항에 대한 직접 링크\">​</a></h2>\n<table><thead><tr><th>구분</th><th>고려사항</th><th>비고</th></tr></thead><tbody><tr><td>물리적 인프라</td><td>HW구성</td><td>GPU 선택, 서버, CPU, 파워, 냉각시스템</td></tr><tr><td></td><td>NW구성</td><td>내부연결, 서버 간 ㅇ녀결, 로드밸런싱, 스토리지 네트워크</td></tr><tr><td>논리적 시스템</td><td>SW환경</td><td>OS, 프레임워크, 분산훈련, 모니터링 도구</td></tr><tr><td></td><td>성능최적화</td><td>GPU 메모리 관리, 연산정밀도, 배치 크기, 하이퍼파라미터 튜닝</td></tr><tr><td></td><td>병렬처리 환경</td><td>데이터 병렬화, 파이프라인 병렬화, 모델 병렬화</td></tr></tbody></table>\n<ul>\n<li>TIA-942 데이터센터 구축을 위한 표준 요구사항을 참조하여 비용효율성과 가용성 제고</li>\n</ul>",
            "url": "https://gracefullight.dev/pe/ca/multi-gpu/",
            "title": "멀티 GPU",
            "summary": "Multi GPU",
            "date_modified": "2025-01-28T01:34:39.958Z",
            "author": {
                "name": "Eunkwang Shin",
                "url": "https://github.com/gracefullight"
            },
            "tags": [
                "professional-engineer",
                "pe/computer-architecture"
            ]
        },
        {
            "id": "https://gracefullight.dev/pe/ca/storage-virtualization/",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"스토리지-가상화-개념\">스토리지 가상화 개념<a href=\"https://gracefullight.dev/pe/ca/storage-virtualization/#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EA%B0%80%EC%83%81%ED%99%94-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"스토리지 가상화 개념에 대한 직접 링크\" title=\"스토리지 가상화 개념에 대한 직접 링크\">​</a></h2>\n<ul>\n<li>물리적으로 분리된 다수 스토리지를 논리적으로 통합하여 스토리지 자원의 가용성과 편리성을 향상시키는 기술</li>\n<li>기존스토리지 낮은 활용도(48%) 극복, 벤더 종속적인 이기종 스토리지 호환성 문제, 유지보수 비용 절감</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"스토리지-가상화-유형\">스토리지 가상화 유형<a href=\"https://gracefullight.dev/pe/ca/storage-virtualization/#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EA%B0%80%EC%83%81%ED%99%94-%EC%9C%A0%ED%98%95\" class=\"hash-link\" aria-label=\"스토리지 가상화 유형에 대한 직접 링크\" title=\"스토리지 가상화 유형에 대한 직접 링크\">​</a></h2>\n<table><thead><tr><th>구분</th><th>블록스토리지 가상화</th><th>파일스토리지 가상화</th><th>오브젝트스토리지 가상화</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding=\"async\" loading=\"lazy\" alt=\"block-storage\" src=\"https://gracefullight.dev/assets/images/block-storage-virtualization-5f6baa6587cd0539cd5881f067b688cf.jpg\" width=\"802\" height=\"332\" class=\"img_xC7_\"></td><td><img decoding=\"async\" loading=\"lazy\" alt=\"file-storage\" src=\"https://gracefullight.dev/assets/images/file-storage-virtualization-6ca0ddee7bf23d7260cc0fcc85e637ff.jpg\" width=\"838\" height=\"322\" class=\"img_xC7_\"></td><td><img decoding=\"async\" loading=\"lazy\" alt=\"object-storage\" src=\"https://gracefullight.dev/assets/images/object-storage-virtualization-fd4ffd3af367317e3697578893fb7a02.jpg\" width=\"952\" height=\"320\" class=\"img_xC7_\"></td></tr><tr><td>개념</td><td>물리적 스토리지를 블록 단위로 추상화하여 논리적 블록으로 제공</td><td>물리적 스토리지를 파일단위로 추상화하여 파일명, 경로 통해 공유</td><td>데이터를 개체 단위로 관리하여 데이터와 메타데이터를 함께 저장하고 논리적 통합하여 제공</td></tr><tr><td>주요환경</td><td>SAN</td><td>NAS/SAN</td><td>클라우드 스토리지, 대규모 비정형데이터 저장소</td></tr><tr><td>접근방식</td><td>OS가 논리적 블록주소 통해 접근</td><td>파일명, 경로</td><td>RESTful API, HTTP, HTTPS</td></tr><tr><td>프로토콜</td><td>iSCSI, FC</td><td>NFC, SMB, CIFS</td><td>S3API, HTTP, HTTPS</td></tr><tr><td>주요사례</td><td>DB, 고성능 어플리케이션, 가상머신디스크</td><td>파일공유, NW기반 데이터 접근</td><td>클라우드스토리지, 데이터분석, 비정형데이터 저장</td></tr><tr><td>특징</td><td>낮은 오버헤드, 빠른 데이터 전송, OS 무관</td><td>액세스제어 용이, 속성정보 관리 편이</td><td>오브젝트별 고유 ID, OS/FS 의존성 없음, 무한 확장성</td></tr><tr><td>대표기술</td><td>SANique, IBM SVC, 스토리지 어레이</td><td>NFS, GPFS, SNFS, GFS</td><td>S3, Cloud Storage, Blob Storage</td></tr></tbody></table>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"스토리지-가상화-구축시-고려사항\">스토리지 가상화 구축시 고려사항<a href=\"https://gracefullight.dev/pe/ca/storage-virtualization/#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EA%B0%80%EC%83%81%ED%99%94-%EA%B5%AC%EC%B6%95%EC%8B%9C-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD\" class=\"hash-link\" aria-label=\"스토리지 가상화 구축시 고려사항에 대한 직접 링크\" title=\"스토리지 가상화 구축시 고려사항에 대한 직접 링크\">​</a></h2>\n<table><thead><tr><th>항목</th><th>고려사항</th><th>설명</th></tr></thead><tbody><tr><td>호환성</td><td>지원 프로토콜 및 솔루션</td><td>DBMS, HA 솔루션, 백업 장치 지원 가능<br>FC 프로토콜, iSCSI 프로토콜, CIFS &amp; NFS 지원</td></tr><tr><td>가용성/안정성</td><td>장애 대응 및 데이터 보호</td><td>Failover 기능 지원 및 데이터 유실 방지<br>바이러스 및 기타 공격 차단</td></tr><tr><td>기능성</td><td>서비스 연속성 및 확장성</td><td>무중단 서비스 및 스토리지 추가/제거<br>디스크 볼륨 할당 및 확장 작업 가능</td></tr><tr><td>구축용이성</td><td>시스템 다운타임 최소화</td><td>기존 시스템과의 호환성 고려<br>다운타임 최소화 방안 제시</td></tr></tbody></table>",
            "url": "https://gracefullight.dev/pe/ca/storage-virtualization/",
            "title": "스토리지 가상화",
            "summary": "Storage Virtualization",
            "date_modified": "2025-01-28T01:24:51.260Z",
            "author": {
                "name": "Eunkwang Shin",
                "url": "https://github.com/gracefullight"
            },
            "tags": [
                "professional-engineer",
                "pe/computer-architecture"
            ]
        },
        {
            "id": "https://gracefullight.dev/pe/ca/tia-942/",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"tia-942-개념\">TIA-942 개념<a href=\"https://gracefullight.dev/pe/ca/tia-942/#tia-942-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"TIA-942 개념에 대한 직접 링크\" title=\"TIA-942 개념에 대한 직접 링크\">​</a></h2>\n<ul>\n<li>미 통신산업협회가 제정한 데이터센터 설계 및 운영에 필요한 최소 요건을 규정한 데이터 센터 인프라의 Defacto 표준</li>\n<li>데이터센터 안정성, 신뢰성, 확장성, 보안지침 제공, 데이터센터 품질 평가기준</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"tia-942-구성도-품질등급\">TIA-942 구성도, 품질등급<a href=\"https://gracefullight.dev/pe/ca/tia-942/#tia-942-%EA%B5%AC%EC%84%B1%EB%8F%84-%ED%92%88%EC%A7%88%EB%93%B1%EA%B8%89\" class=\"hash-link\" aria-label=\"TIA-942 구성도, 품질등급에 대한 직접 링크\" title=\"TIA-942 구성도, 품질등급에 대한 직접 링크\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"tia-942-구성도\">TIA-942 구성도<a href=\"https://gracefullight.dev/pe/ca/tia-942/#tia-942-%EA%B5%AC%EC%84%B1%EB%8F%84\" class=\"hash-link\" aria-label=\"TIA-942 구성도에 대한 직접 링크\" title=\"TIA-942 구성도에 대한 직접 링크\">​</a></h3>\n<!-- -->\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"tia-942-품질등급-개념도\">TIA-942 품질등급 개념도<a href=\"https://gracefullight.dev/pe/ca/tia-942/#tia-942-%ED%92%88%EC%A7%88%EB%93%B1%EA%B8%89-%EA%B0%9C%EB%85%90%EB%8F%84\" class=\"hash-link\" aria-label=\"TIA-942 품질등급 개념도에 대한 직접 링크\" title=\"TIA-942 품질등급 개념도에 대한 직접 링크\">​</a></h3>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"tia-942\" src=\"https://gracefullight.dev/assets/images/tia-942-06f4e5bd7969b8b60766e56180ae4c00.jpg\" width=\"1278\" height=\"620\" class=\"img_xC7_\"></p>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"tia-942-품질등급-상세설명\">TIA-942 품질등급 상세설명<a href=\"https://gracefullight.dev/pe/ca/tia-942/#tia-942-%ED%92%88%EC%A7%88%EB%93%B1%EA%B8%89-%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" class=\"hash-link\" aria-label=\"TIA-942 품질등급 상세설명에 대한 직접 링크\" title=\"TIA-942 품질등급 상세설명에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>Tier1</th><th>Tier2</th><th>Tier3</th><th>Tier4</th></tr></thead><tbody><tr><td>장애영향</td><td>비/계획된 액티비티에 대한 사이트 영향 높음</td><td>비/계획된 액티비티에 대한 사이트 영향 보통</td><td>계획된 액티비티에 대한 컴퓨팅 HW 운영지장 없음</td><td>계획된 액티비티에 대한 임계부하 없음</td></tr><tr><td></td><td></td><td></td><td>비계획 작업은 영향</td><td>비계획 액티비티 임계부하 적어도 1번 방어</td></tr><tr><td>전력/냉방시설 이중화</td><td>필요</td><td>N+1</td><td>N+1, 동시 활성화</td><td>2(N+1), 무정지상태</td></tr><tr><td>백본/라우터 이중화</td><td>없음</td><td>없음</td><td>필요</td><td>필요</td></tr><tr><td>적용기간</td><td>3개월</td><td>~6개월</td><td>15~20개월</td><td>15~20개월</td></tr><tr><td>MTTR</td><td>28.8h</td><td>22.0h</td><td>1.6h</td><td>0.4h</td></tr><tr><td>보안시설</td><td>일반 잠금장치</td><td>카드인식</td><td>생체인식</td><td>생체인식</td></tr></tbody></table>",
            "url": "https://gracefullight.dev/pe/ca/tia-942/",
            "title": "TIA-942",
            "summary": "TIA-942",
            "date_modified": "2025-01-28T01:08:36.602Z",
            "author": {
                "name": "Eunkwang Shin",
                "url": "https://github.com/gracefullight"
            },
            "tags": [
                "professional-engineer",
                "pe/computer-architecture"
            ]
        },
        {
            "id": "https://gracefullight.dev/pe/ca/pim/",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"pim-개념\">PIM 개념<a href=\"https://gracefullight.dev/pe/ca/pim/#pim-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"PIM 개념에 대한 직접 링크\" title=\"PIM 개념에 대한 직접 링크\">​</a></h2>\n<ul>\n<li>메모리 내부 연산 기능을 추가하여, 데이터 이동 없이 메모리 자체 연산 수행으로 성능 개선 및 에너지 효율을 높이는 메모리 반도체</li>\n<li>폰 논이만 구조 한계 극복, 추론 AI 패러다임, 데이ㅓ 병목 최소화, 저전력 설계</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"pim-개념도-pnm과의-비교-적용방안\">PIM 개념도, PNM과의 비교, 적용방안<a href=\"https://gracefullight.dev/pe/ca/pim/#pim-%EA%B0%9C%EB%85%90%EB%8F%84-pnm%EA%B3%BC%EC%9D%98-%EB%B9%84%EA%B5%90-%EC%A0%81%EC%9A%A9%EB%B0%A9%EC%95%88\" class=\"hash-link\" aria-label=\"PIM 개념도, PNM과의 비교, 적용방안에 대한 직접 링크\" title=\"PIM 개념도, PNM과의 비교, 적용방안에 대한 직접 링크\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"pim-개념도\">PIM 개념도<a href=\"https://gracefullight.dev/pe/ca/pim/#pim-%EA%B0%9C%EB%85%90%EB%8F%84\" class=\"hash-link\" aria-label=\"PIM 개념도에 대한 직접 링크\" title=\"PIM 개념도에 대한 직접 링크\">​</a></h3>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"pim\" src=\"https://gracefullight.dev/assets/images/pim-cdbd67f2a21eb186a72aac5e839f3967.jpg\" width=\"2262\" height=\"648\" class=\"img_xC7_\"></p>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"pim-pnm-비교\">PIM, PNM 비교<a href=\"https://gracefullight.dev/pe/ca/pim/#pim-pnm-%EB%B9%84%EA%B5%90\" class=\"hash-link\" aria-label=\"PIM, PNM 비교에 대한 직접 링크\" title=\"PIM, PNM 비교에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>PIM</th><th>PNM</th></tr></thead><tbody><tr><td>연산기 위치</td><td>DRAM 칩 내부</td><td>DRAM 근처 별도 칩</td></tr><tr><td>전송지연</td><td>없음</td><td>일부 있음</td></tr><tr><td>장점</td><td>데이터 이동 제거</td><td>범용성 확보</td></tr><tr><td></td><td>병렬처리 극대화</td><td>전력효율성</td></tr><tr><td>단점</td><td>범용성 낮음</td><td>상대적 낮은 성능</td></tr><tr><td>분야</td><td>추론 AI 등</td><td>고성능컴퓨팅, 데이터센터</td></tr></tbody></table>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"pim-적용바안\">PIM 적용바안<a href=\"https://gracefullight.dev/pe/ca/pim/#pim-%EC%A0%81%EC%9A%A9%EB%B0%94%EC%95%88\" class=\"hash-link\" aria-label=\"PIM 적용바안에 대한 직접 링크\" title=\"PIM 적용바안에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>내용</th><th>비고</th></tr></thead><tbody><tr><td>AI 가속기</td><td>AI 작업의 대규모 병렬 처리시 활용</td><td>음성인식, 이미지 처리</td></tr><tr><td>빅데이터 분석</td><td>대량 데이터 실시간 처리 최적화</td><td>SEM, EPM 등</td></tr><tr><td>고성능 컴퓨팅</td><td>GPU와 협업하여 워크로드 분산</td><td>MAC 연산 수행</td></tr></tbody></table>",
            "url": "https://gracefullight.dev/pe/ca/pim/",
            "title": "PIM, Processing In Memory",
            "summary": "Processing In Memory",
            "date_modified": "2025-01-28T00:46:42.874Z",
            "author": {
                "name": "Eunkwang Shin",
                "url": "https://github.com/gracefullight"
            },
            "tags": [
                "professional-engineer",
                "pe/computer-architecture"
            ]
        },
        {
            "id": "https://gracefullight.dev/pe/ca/chiplet/",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"칩렛-개념\">칩렛 개념<a href=\"https://gracefullight.dev/pe/ca/chiplet/#%EC%B9%A9%EB%A0%9B-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"칩렛 개념에 대한 직접 링크\" title=\"칩렛 개념에 대한 직접 링크\">​</a></h2>\n<ul>\n<li>여러 개의 작은 칩(다이)을 모듈화하여 하나의 패키지 안에서 상호연결하는 기술</li>\n<li>무어의 법칙 한계, 단일 SoC를 나누고 조합하여 유연한 아키텍처 제공, 설계/생산비용 절감</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"칩렛-개념도-구현-방법-장점\">칩렛 개념도, 구현 방법, 장점<a href=\"https://gracefullight.dev/pe/ca/chiplet/#%EC%B9%A9%EB%A0%9B-%EA%B0%9C%EB%85%90%EB%8F%84-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95-%EC%9E%A5%EC%A0%90\" class=\"hash-link\" aria-label=\"칩렛 개념도, 구현 방법, 장점에 대한 직접 링크\" title=\"칩렛 개념도, 구현 방법, 장점에 대한 직접 링크\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"칩렛-개념도\">칩렛 개념도<a href=\"https://gracefullight.dev/pe/ca/chiplet/#%EC%B9%A9%EB%A0%9B-%EA%B0%9C%EB%85%90%EB%8F%84\" class=\"hash-link\" aria-label=\"칩렛 개념도에 대한 직접 링크\" title=\"칩렛 개념도에 대한 직접 링크\">​</a></h3>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"chiplet\" src=\"https://gracefullight.dev/assets/images/chiplet-a826476a0852a685f6afac429cc48485.jpg\" width=\"2722\" height=\"798\" class=\"img_xC7_\"></p>\n<ul>\n<li>다이 슬롯 모듈화로 다양항 기능을 가진 이기종 칩을 결합하여 사용 가능</li>\n</ul>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"칩렛-구현-방법\">칩렛 구현 방법<a href=\"https://gracefullight.dev/pe/ca/chiplet/#%EC%B9%A9%EB%A0%9B-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95\" class=\"hash-link\" aria-label=\"칩렛 구현 방법에 대한 직접 링크\" title=\"칩렛 구현 방법에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>와이어본딩</th><th>플립칩 본딩</th><th>TSV</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding=\"async\" loading=\"lazy\" alt=\"wire-bonding\" src=\"https://gracefullight.dev/assets/images/wire-bonding-63918e5feb718aac0666a4d6c822bfe7.jpg\" width=\"634\" height=\"294\" class=\"img_xC7_\"></td><td><img decoding=\"async\" loading=\"lazy\" alt=\"filp-chip-bonding\" src=\"https://gracefullight.dev/assets/images/flip-chip-bonding-97ca8c0ddee6d434640d79eafa6de79a.jpg\" width=\"620\" height=\"314\" class=\"img_xC7_\"></td><td><img decoding=\"async\" loading=\"lazy\" alt=\"through silicon via\" src=\"https://gracefullight.dev/assets/images/tsv-df25fdbe21e266d7b2180fd73833905b.jpg\" width=\"646\" height=\"282\" class=\"img_xC7_\"></td></tr><tr><td>개념</td><td>칩과 기판 또는 칩 간 연결을 금속 와이어를 통해 구현하는 전통적인 본딩 방식</td><td>칩과 기판을 플립(뒤집어) 배치한 후, 범프(땜납)로 연결하는 본딩 방식</td><td>실리콘 웨이퍼에 수직으로 뚫린 구멍(비아)를 통해 칩 내부 및 칩 간 전기 신호를 연결하는 3D 본딩 방식</td></tr><tr><td>특징</td><td>전기적 신호 전달거리 짧음</td><td>작은 전기저항, 빠른 속도</td><td>칩 간 인터커넥션 길이 감소, 빠른 신호전달</td></tr><tr><td></td><td>전기적 특성 우수</td><td>작은 폼팩터 구현 가능</td><td>고용량, 저전력</td></tr></tbody></table>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"칩렛-장점\">칩렛 장점<a href=\"https://gracefullight.dev/pe/ca/chiplet/#%EC%B9%A9%EB%A0%9B-%EC%9E%A5%EC%A0%90\" class=\"hash-link\" aria-label=\"칩렛 장점에 대한 직접 링크\" title=\"칩렛 장점에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구분</th><th>측면</th><th>장점</th></tr></thead><tbody><tr><td>기술적</td><td>품질측면</td><td>칩 분할 생산 통한 수율향상</td></tr><tr><td></td><td>제조측면</td><td>바른 설계와 제작 가능</td></tr><tr><td></td><td>결합측면</td><td>상이한 이종칩 결합 가능</td></tr><tr><td>산업적</td><td>비용측면</td><td>제작 및 설계 비용 감소</td></tr><tr><td></td><td>개발측면</td><td>핵심 기술 개발 효율</td></tr><tr><td></td><td>시장측면</td><td>웨이퍼 칩 설계, 제작 진입장벽 낮춤</td></tr></tbody></table>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"soc-sip-chiplet-비교\">SoC, SiP, Chiplet 비교<a href=\"https://gracefullight.dev/pe/ca/chiplet/#soc-sip-chiplet-%EB%B9%84%EA%B5%90\" class=\"hash-link\" aria-label=\"SoC, SiP, Chiplet 비교에 대한 직접 링크\" title=\"SoC, SiP, Chiplet 비교에 대한 직접 링크\">​</a></h2>\n<table><thead><tr><th>구분</th><th>SoC</th><th>SiP</th><th>Chiplet</th></tr></thead><tbody><tr><td>구조</td><td>단일 칩 내 모든 기능 통합</td><td>여러 다이를 하나의 패키지로 통합</td><td>개별/기능별 모듈형 칩 통합</td></tr><tr><td>유연성</td><td>낮음</td><td>중간</td><td>높음</td></tr><tr><td>성능최적화</td><td>제한적</td><td>제한적</td><td>각 기능별 최적화 가능</td></tr><tr><td>비용효율성</td><td>낮음</td><td>중간</td><td>높음</td></tr><tr><td>개발기간</td><td>김</td><td>중간</td><td>짧음</td></tr></tbody></table>",
            "url": "https://gracefullight.dev/pe/ca/chiplet/",
            "title": "칩렛",
            "summary": "Chiplet",
            "date_modified": "2025-01-28T00:19:18.460Z",
            "author": {
                "name": "Eunkwang Shin",
                "url": "https://github.com/gracefullight"
            },
            "tags": [
                "professional-engineer",
                "pe/computer-architecture"
            ]
        },
        {
            "id": "https://gracefullight.dev/pe/ca/cache/",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"캐시-개념\">캐시 개념<a href=\"https://gracefullight.dev/pe/ca/cache/#%EC%BA%90%EC%8B%9C-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"캐시 개념에 대한 직접 링크\" title=\"캐시 개념에 대한 직접 링크\">​</a></h2>\n<!-- -->\n<ul>\n<li>CPU와 주기억장치 간의 속도차를 완화시켜 프로세서 대기시간을 최소화를 위한 고속 메모리</li>\n<li>캐시 용량이 메인 메모리보다 작아 일부분만 적재되므로 최고의 적중률을 내기 위해 매핑 기법 필요</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"캐시메모리-매핑-방식\">캐시메모리 매핑 방식<a href=\"https://gracefullight.dev/pe/ca/cache/#%EC%BA%90%EC%8B%9C%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%A7%A4%ED%95%91-%EB%B0%A9%EC%8B%9D\" class=\"hash-link\" aria-label=\"캐시메모리 매핑 방식에 대한 직접 링크\" title=\"캐시메모리 매핑 방식에 대한 직접 링크\">​</a></h2>\n<table><thead><tr><th>구분</th><th>직접 사상</th><th>연관 사상</th><th>집합 연관 사상</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding=\"async\" loading=\"lazy\" alt=\"direct\" src=\"https://gracefullight.dev/assets/images/direct-mapping-7f5a88ad42347a48f42b02fca85320cd.png\" width=\"1096\" height=\"842\" class=\"img_xC7_\"></td><td><img decoding=\"async\" loading=\"lazy\" alt=\"associative\" src=\"https://gracefullight.dev/assets/images/associative-mapping-e4cc7d722108d948813d0803e801c9fd.png\" width=\"1158\" height=\"862\" class=\"img_xC7_\"></td><td><img decoding=\"async\" loading=\"lazy\" alt=\"set-associative\" src=\"https://gracefullight.dev/assets/images/set-associative-mapping-5eab21235ddef4acccd1c5881c83097c.png\" width=\"1150\" height=\"800\" class=\"img_xC7_\"></td></tr><tr><td>개념</td><td>메모리 블록이 캐시의 특정 라인으로만 로딩 가능</td><td>메모리 블록이 임의의 라인으로 로딩 가능</td><td>메모리 블록이 특정 집합의 모든 라인에 로딩 가능</td></tr><tr><td>장점</td><td>회로 구현 간단, 처리 속도 향상</td><td>캐시 적중률 향상</td><td>캐시:메모리 = N:1로 효율적</td></tr><tr><td>단점</td><td>캐시 실패율 높음</td><td>회로 복잡, 처리 속도 느림</td><td>회로 복잡</td></tr><tr><td>구조</td><td>지정된 특정 라인으로 로딩 가능</td><td>임의의 라인으로 로딩 가능</td><td>특정 집합의 모든 라인에 로딩 가능</td></tr></tbody></table>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"캐시-쓰기-정책\">캐시 쓰기 정책<a href=\"https://gracefullight.dev/pe/ca/cache/#%EC%BA%90%EC%8B%9C-%EC%93%B0%EA%B8%B0-%EC%A0%95%EC%B1%85\" class=\"hash-link\" aria-label=\"캐시 쓰기 정책에 대한 직접 링크\" title=\"캐시 쓰기 정책에 대한 직접 링크\">​</a></h2>\n<table><thead><tr><th>구분</th><th>Write-Through</th><th>Write-Back</th></tr></thead><tbody><tr><td>개념도</td><td><img decoding=\"async\" loading=\"lazy\" alt=\"write-through\" src=\"https://gracefullight.dev/assets/images/write-through-d10b6e19cb0bd4363958f26e1ffe7661.png\" width=\"600\" height=\"314\" class=\"img_xC7_\"></td><td><img decoding=\"async\" loading=\"lazy\" alt=\"write-back\" src=\"https://gracefullight.dev/assets/images/write-back-c3d8158a711c16a30d9d3ab49c5f947a.png\" width=\"602\" height=\"302\" class=\"img_xC7_\"></td></tr><tr><td>개념</td><td>모든 쓰기 동작들이 캐시와 주기억장치에 동시에 수행되는 방식</td><td>캐시에서 데이터 변경 후 주기억장치에는 나중에 블록을 복사하여 갱신하는 방식</td></tr><tr><td>특징</td><td>단순, 일관성 보장</td><td>쓰기동작 최소화, 짧은 쓰기 시간</td></tr><tr><td></td><td>긴 쓰기 시간, 많은 트래픽</td><td>일관성 유지 어려움, 블록 교체시 상태 확인 필요</td></tr><tr><td>일관성 문제</td><td><img decoding=\"async\" loading=\"lazy\" alt=\"write-through\" src=\"https://gracefullight.dev/assets/images/write-through-issue-6e112735e46403c6afc8f475ca51c7f5.png\" width=\"1228\" height=\"396\" class=\"img_xC7_\"></td><td><img decoding=\"async\" loading=\"lazy\" alt=\"write-back\" src=\"https://gracefullight.dev/assets/images/write-back-issue-f818fc8d3b1d8471e43e805276f1ee43.png\" width=\"1426\" height=\"388\" class=\"img_xC7_\"></td></tr></tbody></table>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"캐시-일관성-유지-기법\">캐시 일관성 유지 기법<a href=\"https://gracefullight.dev/pe/ca/cache/#%EC%BA%90%EC%8B%9C-%EC%9D%BC%EA%B4%80%EC%84%B1-%EC%9C%A0%EC%A7%80-%EA%B8%B0%EB%B2%95\" class=\"hash-link\" aria-label=\"캐시 일관성 유지 기법에 대한 직접 링크\" title=\"캐시 일관성 유지 기법에 대한 직접 링크\">​</a></h2>\n<table><thead><tr><th>구분</th><th>기법</th><th>설명</th></tr></thead><tbody><tr><td>SW 기법</td><td>공유 캐시 사용</td><td>모든 프로세서가 하나의 공유 캐시를 사용</td></tr><tr><td></td><td></td><td>항상 캐시 일관성이 유지</td></tr><tr><td></td><td></td><td>프로세서 간 캐시 액세스 충돌로 성능 저하 초래</td></tr><tr><td></td><td>공유 변수 캐시 미사용</td><td>공유변수를 캐시에 저장하지 않는 기법</td></tr><tr><td></td><td></td><td>캐시 저장 불가능 데이터: Lock 변수, 프로세스 큐와 같은 공유 데이터 구조, 입출력 영역에 의해 보호되는 데이터</td></tr><tr><td></td><td></td><td>캐시 적중률 저하 및 I/O 성능 저하 초래</td></tr><tr><td>HW 기법</td><td>디렉토리 프로토콜</td><td>캐시의 정보 상태(캐시 블록 공유상태, 노드 등)을 주기억장치 디렉토리에 저장하여 일관성을 보장하는 방법</td></tr><tr><td></td><td></td><td>Full Map 디렉토리: 디렉토리에 모든 캐시의 포인터와 데이터 저장</td></tr><tr><td></td><td></td><td>Limited 디렉토리: Full Map 디렉토리의 기억장소 부담 감소</td></tr><tr><td></td><td></td><td>Chained 디렉토리: 캐시 포인터를 linked list로 연결, 기억장소 부담 감소</td></tr><tr><td></td><td></td><td>Passive한 방법이며 다중서버 복잡한 시스템에 적합</td></tr><tr><td></td><td>스누피 프로토콜</td><td>멀티 프로세서 내의 모든 캐시 제어기에 캐시 일관성 유지를 위한 정보를 브로드캐스트하는 기법</td></tr><tr><td></td><td></td><td>스누피 제어기: 다른 프로세서에 의한 메모리 액세스 감지 후 상태 조절</td></tr><tr><td></td><td></td><td>쓰기 갱신(Write Update): Write 발생 시 모든 캐시에 갱신된 정보 전송</td></tr><tr><td></td><td></td><td>쓰기 무효(Write Invalidate): Write 발생 시 Invalid 메시지로 브로드캐스팅</td></tr><tr><td></td><td></td><td>MESI 프로토콜: Modified(수정), Exclusive(배타), Shared(2개 이상의 캐시에 공유), Invalid(무효, 다른 캐시가 수정) 4가지 상태로 데이터 유효성 여부 판단</td></tr><tr><td></td><td></td><td>Active한 방법, 소규모 시스템, 높은 버스 대역폭</td></tr><tr><td>프로토콜</td><td>기타 프로토콜</td><td>MEI, MSI, MOESI, MESIF 프로토콜</td></tr><tr><td></td><td></td><td>O(Owned): 변경 상태의 캐시 블록을 다른 곳에서 읽은 경우</td></tr><tr><td></td><td></td><td>F(Forwarding): 여러 프로세서가 공유한 캐시 블록 접근 시</td></tr></tbody></table>",
            "url": "https://gracefullight.dev/pe/ca/cache/",
            "title": "캐시",
            "summary": "Cache",
            "date_modified": "2025-01-27T13:13:52.870Z",
            "author": {
                "name": "Eunkwang Shin",
                "url": "https://github.com/gracefullight"
            },
            "tags": [
                "professional-engineer",
                "pe/computer-architecture"
            ]
        },
        {
            "id": "https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"제어장치-개념\">제어장치 개념<a href=\"https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#%EC%A0%9C%EC%96%B4%EC%9E%A5%EC%B9%98-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"제어장치 개념에 대한 직접 링크\" title=\"제어장치 개념에 대한 직접 링크\">​</a></h2>\n<!-- -->\n<ul>\n<li>프로그램 명령어를 해석하고, 레지스터에 명령실행 제어 신호를 발생시키는 CPU 구성요소</li>\n<li>명령어 해독, 제어신호 생성, 제어신호 인가 기능 수행</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"micro-programmed-구현방법-개념-및-구성요소\">Micro-programmed 구현방법 개념 및 구성요소<a href=\"https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#micro-programmed-%EA%B5%AC%ED%98%84%EB%B0%A9%EB%B2%95-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" class=\"hash-link\" aria-label=\"Micro-programmed 구현방법 개념 및 구성요소에 대한 직접 링크\" title=\"Micro-programmed 구현방법 개념 및 구성요소에 대한 직접 링크\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"micro-programmed-개념\">Micro-programmed 개념<a href=\"https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#micro-programmed-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"Micro-programmed 개념에 대한 직접 링크\" title=\"Micro-programmed 개념에 대한 직접 링크\">​</a></h3>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Micro-programmed\" src=\"https://gracefullight.dev/assets/images/micro-programmed-b474904168c13307f5674b9c48fa97e6.jpg\" width=\"1316\" height=\"700\" class=\"img_xC7_\"></p>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"micro-programmed-구성요소\">Micro-programmed 구성요소<a href=\"https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#micro-programmed-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" class=\"hash-link\" aria-label=\"Micro-programmed 구성요소에 대한 직접 링크\" title=\"Micro-programmed 구성요소에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구성요소</th><th>역할</th><th>설명</th></tr></thead><tbody><tr><td>IR (Instruction Register)</td><td>명령어 저장</td><td>현재 실행 중인 명령어를 저장하고 제어 메모리 주소를 생성하는 데 사용</td></tr><tr><td>Address Generator</td><td>마이크로 명령 주소 생성</td><td>현재 명령어와 상태를 기반으로 제어 메모리의 다음 주소를 생성</td></tr><tr><td>CAR (Control Address Register)</td><td>제어 메모리 주소 저장</td><td>제어 메모리에서 접근할 주소를 저장</td></tr><tr><td>Control Memory (ROM)</td><td>마이크로코드 저장</td><td>제어 신호 생성을 위한 마이크로 명령어들을 저장</td></tr><tr><td>CDR (Control Data Register)</td><td>제어 데이터 저장</td><td>제어 메모리에서 읽어온 마이크로 명령어를 저장</td></tr><tr><td>Control Signals</td><td>제어 신호</td><td>마이크로 명령어에 따라 생성된 최종 제어 신호</td></tr></tbody></table>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"hard-wired-구현방법-개념-및-구성요소\">Hard-wired 구현방법 개념 및 구성요소<a href=\"https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#hard-wired-%EA%B5%AC%ED%98%84%EB%B0%A9%EB%B2%95-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" class=\"hash-link\" aria-label=\"Hard-wired 구현방법 개념 및 구성요소에 대한 직접 링크\" title=\"Hard-wired 구현방법 개념 및 구성요소에 대한 직접 링크\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"hard-wired-개념\">Hard-wired 개념<a href=\"https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#hard-wired-%EA%B0%9C%EB%85%90\" class=\"hash-link\" aria-label=\"Hard-wired 개념에 대한 직접 링크\" title=\"Hard-wired 개념에 대한 직접 링크\">​</a></h3>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Hard-wired\" src=\"https://gracefullight.dev/assets/images/hard-wired-f76becd9ef64da999798cc3948b963e8.jpg\" width=\"1328\" height=\"710\" class=\"img_xC7_\"></p>\n<h3 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"hard-wired-구성요소\">Hard-wired 구성요소<a href=\"https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#hard-wired-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" class=\"hash-link\" aria-label=\"Hard-wired 구성요소에 대한 직접 링크\" title=\"Hard-wired 구성요소에 대한 직접 링크\">​</a></h3>\n<table><thead><tr><th>구성요소</th><th>역할</th><th>설명</th></tr></thead><tbody><tr><td>IR (Instruction Register)</td><td>명령어 저장</td><td>현재 실행 중인 명령어를 저장하고 디코더에 전달</td></tr><tr><td>Instruction Decoder</td><td>명령어 해독</td><td>IR에서 전달받은 명령어를 해독하여 제어 신호 생성을 준비</td></tr><tr><td>Control Step Counter</td><td>클록 기반 스텝 제어</td><td>클록 신호를 기반으로 명령 실행 단계를 순차적으로 관리</td></tr><tr><td>Control Signal Generator</td><td>제어 신호 생성</td><td>디코더와 스텝 카운터의 정보를 기반으로 제어 신호를 생성</td></tr><tr><td>Flags</td><td>상태 플래그</td><td>연산 결과나 상태 정보를 저장하고 제어 신호 생성에 활용</td></tr></tbody></table>\n<h2 class=\"anchor anchorWithStickyNavbar_OSIK\" id=\"micro-programmed-hard-wired-비교\">Micro-programmed, Hard-wired 비교<a href=\"https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/#micro-programmed-hard-wired-%EB%B9%84%EA%B5%90\" class=\"hash-link\" aria-label=\"Micro-programmed, Hard-wired 비교에 대한 직접 링크\" title=\"Micro-programmed, Hard-wired 비교에 대한 직접 링크\">​</a></h2>\n<table><thead><tr><th>구분</th><th>Micro-programmed</th><th>Hard-wired</th></tr></thead><tbody><tr><td>개념</td><td>제어 메모리에 저장된 마이크로코드를 사용하여 제어 신호를 생성하는 방식</td><td>고정된 논리 회로를 사용하여 제어 신호를 생성하는 방식</td></tr><tr><td>속도</td><td>느림, SW 처리</td><td>빠름, HW 회로</td></tr><tr><td>비용</td><td>저가</td><td>고가</td></tr><tr><td>전력소비</td><td>많음</td><td>적음</td></tr><tr><td>적용방식</td><td>CISC</td><td>RISC</td></tr><tr><td>오류발생률</td><td>디버깅 용이, 수정 가능</td><td>설계 오류 시 수정 어려움</td></tr></tbody></table>",
            "url": "https://gracefullight.dev/pe/ca/control-unit-hardwired-vs-microprogrammed/",
            "title": "제어장치, 마이크로프로그램, 하드와이어",
            "summary": "The differences between Micro-programmed and Hard-wired Control Units",
            "date_modified": "2025-01-27T12:34:26.441Z",
            "author": {
                "name": "Eunkwang Shin",
                "url": "https://github.com/gracefullight"
            },
            "tags": [
                "professional-engineer",
                "pe/computer-architecture"
            ]
        }
    ]
}